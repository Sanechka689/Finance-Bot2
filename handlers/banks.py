# handlers/banks.py ‚Äî —ç—Ç–∞–ø 3: –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤

from datetime import datetime
import calendar
import pytz

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from utils.constants import (
    STATE_BANK_CHOOSE,
    STATE_BANK_CUSTOM,
    STATE_BANK_AMOUNT,
    STATE_BANK_OPTION,
)
from services.sheets_service import open_finance_and_plans

async def show_banks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    3.7 –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–Ω–∫–æ–≤ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
    if "sheet_url" not in context.user_data:
        await update.effective_message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É ‚Äî /setup")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤
    finance_ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    banks = finance_ws.col_values(3)[1:]  # –∫–æ–ª–æ–Ω–∫–∞ ¬´–ë–∞–Ω–∫¬ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    unique_banks = sorted(set(banks))
    banks_list = ", ".join(unique_banks) if unique_banks else "–Ω–µ—Ç"

    text = (
        f"üè¶ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±–∞–Ω–∫–∏: {banks_list}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª:"
    )
    keyboard = [
        [InlineKeyboardButton("–°–±–µ—Ä",     callback_data="bank_–°–±–µ—Ä"),
         InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="bank_–¢–∏–Ω—å–∫–æ—Ñ—Ñ")],
        [InlineKeyboardButton("–ê–ª—å—Ñ–∞",    callback_data="bank_–ê–ª—å—Ñ–∞"),
         InlineKeyboardButton("–ú–ö–ë",      callback_data="bank_–ú–ö–ë")],
        [InlineKeyboardButton("–ù–∞–ª",      callback_data="bank_–ù–∞–ª"),
         InlineKeyboardButton("–í–¢–ë",      callback_data="bank_–í–¢–ë")],
        [InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="bank_custom")],
        [
         InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more"),
         InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",   callback_data="skip_add"),
        ],
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ",          callback_data="finish_setup")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",    callback_data="support")],
    ]
    await update.effective_message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_CHOOSE

async def handle_bank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    3.8 –õ–æ–≥–∏–∫–∞ –º–µ–Ω—é –±–∞–Ω–∫–æ–≤: –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥—ã, ¬´—Å–≤–æ–π –±–∞–Ω–∫¬ª
    """
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if data == "support":
        await query.message.reply_text("üìß –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: financebot365@gmail.com")
        return STATE_BANK_CHOOSE

    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–æ–≤—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω
    if data == "skip_add":
        finance_ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
        if len(finance_ws.col_values(3)) > 1:
            await query.edit_message_text("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª–µ–µ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –±–∞–Ω–∫–æ–≤.")
            return ConversationHandler.END
        else:
            await query.message.reply_text("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–Ω–∫.")
            return STATE_BANK_CHOOSE

    # –ó–∞–≤–µ—Ä—à–∏—Ç—å —ç—Ç–∞–ø
    if data == "finish_setup":
        await query.edit_message_text("üéâ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return ConversationHandler.END

    # –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é
    if data == "add_more":
        await query.edit_message_text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞:")
        return await show_banks_menu(update, context)

    # –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    if data == "bank_custom":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        return STATE_BANK_CUSTOM

    # –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞
    if data.startswith("bank_"):
        bank = data.split("_", 1)[1]
        context.user_data["bank"] = bank
        await query.edit_message_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:",
            parse_mode="HTML",
        )
        return STATE_BANK_AMOUNT

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    await query.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    return STATE_BANK_CHOOSE

async def handle_bank_custom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    3.8–∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞
    """
    bank = update.message.text.strip()
    context.user_data["bank"] = bank
    await update.message.reply_text(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:",
        parse_mode="HTML",
    )
    return STATE_BANK_AMOUNT

async def handle_bank_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    3.9 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã ‚Äî –∏ —Ä–∞–∑–ª–∏—á–∏–µ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–¢—Ä–∞—Ç–∞
    """
    text = update.message.text.strip()
    try:
        amount = float(text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ -456,67")
        return STATE_BANK_AMOUNT

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –∑–Ω–∞–∫—É
    operation = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if amount >= 0 else "–¢—Ä–∞—Ç–∞"
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É —Å –¥–≤—É–º—è –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏
    amount_str = f"{amount:.2f}".replace(".", ",")

    # –î–æ—Å—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    finance_ws, _ = open_finance_and_plans(context.user_data["sheet_url"])

    # –î–∞—Ç–∞ –ø–æ –ú–æ—Å–∫–≤–µ
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    year = now.year
    month = {
        1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
        5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
        9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å",
    }[now.month]
    date_str = now.strftime("%d.%m.%Y")

    # –°–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏
    row = [
        year,
        month,
        context.user_data["bank"],
        operation,
        date_str,
        amount_str,
        "–°—Ç–∞—Ä—Ç",
        "-",
    ]
    finance_ws.append_row(row, value_input_option="USER_ENTERED")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–∞–ª—å—à–µ
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_more"),
            InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ",         callback_data="finish_setup"),
        ]
    ]
    await update.message.reply_text(
        f"‚úÖ {operation} –±–∞–Ω–∫–∞ <b>{context.user_data['bank']}</b> ‚Äî <b>{amount_str}</b>.",
        parse_mode="HTML",
    )
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–ø—Ü–∏–∏
    return STATE_BANK_OPTION

def register_banks_handlers(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è —ç—Ç–∞–ø–∞ –±–∞–Ω–∫–æ–≤ (/banks)
    """
    conv = ConversationHandler(
        entry_points=[CommandHandler("banks", show_banks_menu)],
        states={
            STATE_BANK_CHOOSE: [
                CallbackQueryHandler(handle_bank_choice)
            ],
            STATE_BANK_CUSTOM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_custom)
            ],
            STATE_BANK_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_amount)
            ],
            STATE_BANK_OPTION: [
                CallbackQueryHandler(handle_bank_choice)
            ],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
