# handlers/banks.py ‚Äî —ç—Ç–∞–ø 3: –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤

from datetime import datetime
import pytz

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from utils.constants import (
    STATE_BANK_MENU,
    STATE_BANK_CUSTOM,
    STATE_BANK_AMOUNT,
    STATE_BANK_OPTION,
    STATE_BANK_EDIT_CHOICE,
    STATE_BANK_EDIT_INPUT,
)
from services.sheets_service import open_finance_and_plans

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.1 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–Ω–∫–æ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def show_banks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–Ω–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–ø—Ä–æ–ø—É—Å–∫–∞.
    """
    if "sheet_url" not in context.user_data:
        await update.effective_message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É ‚Äî /setup")
        return ConversationHandler.END

    # –ß–∏—Ç–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤—Å–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –±–∞–Ω–∫–∏
    finance_ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    existing = finance_ws.col_values(3)[1:]  # –∫–æ–ª–æ–Ω–∫–∞ ¬´–ë–∞–Ω–∫¬ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    unique = sorted(set(existing))
    current = ", ".join(unique) if unique else "–Ω–µ—Ç"

    text = (
        f"üè¶ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±–∞–Ω–∫–∏: {current}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤¬ª:"
    )
    keyboard = [
        [
            InlineKeyboardButton("–°–±–µ—Ä",     callback_data="bank_–°–±–µ—Ä"),
            InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="bank_–¢–∏–Ω—å–∫–æ—Ñ—Ñ"),
        ],
        [
            InlineKeyboardButton("–ê–ª—å—Ñ–∞", callback_data="bank_–ê–ª—å—Ñ–∞"),
            InlineKeyboardButton("–ú–ö–ë",   callback_data="bank_–ú–ö–ë"),
        ],
        [
            InlineKeyboardButton("–ù–∞–ª", callback_data="bank_–ù–∞–ª"),
            InlineKeyboardButton("–í–¢–ë", callback_data="bank_–í–¢–ë"),
        ],
        [InlineKeyboardButton("–°–≤–æ–π –±–∞–Ω–∫", callback_data="bank_custom")],
        [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤", callback_data="skip_add")],
        [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    ]
    await update.effective_message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_MENU


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if data == "support":
        await query.message.reply_text("üìß –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: financebot365@gmail.com")
        return STATE_BANK_MENU

    # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    if data == "skip_add":
        ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
        if len(ws.col_values(3)) > 1:
            await query.edit_message_text("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤.")
            return ConversationHandler.END
        else:
            await query.message.reply_text("‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–Ω–∫.")
            return STATE_BANK_MENU

    # –°–≤–æ–π –±–∞–Ω–∫ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
    if data == "bank_custom":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        return STATE_BANK_CUSTOM

    # –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞
    if data.startswith("bank_"):
        bank = data.split("_", 1)[1]
        context.user_data["bank_entry"] = {"bank": bank}
        await query.edit_message_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:", parse_mode="HTML")
        return STATE_BANK_AMOUNT

    # –ù–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π
    await query.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    return STATE_BANK_MENU


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.3 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_custom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    bank = update.message.text.strip()
    context.user_data["bank_entry"] = {"bank": bank}
    await update.message.reply_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:", parse_mode="HTML")
    return STATE_BANK_AMOUNT


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.4 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    try:
        amount = float(text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ -456,67")
        return STATE_BANK_AMOUNT

    entry = context.user_data["bank_entry"]
    entry["amount"] = amount

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])

    # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    year = now.year
    month = {
        1:"–Ø–Ω–≤–∞—Ä—å",2:"–§–µ–≤—Ä–∞–ª—å",3:"–ú–∞—Ä—Ç",4:"–ê–ø—Ä–µ–ª—å",
        5:"–ú–∞–π",6:"–ò—é–Ω—å",7:"–ò—é–ª—å",8:"–ê–≤–≥—É—Å—Ç",
        9:"–°–µ–Ω—Ç—è–±—Ä—å",10:"–û–∫—Ç—è–±—Ä—å",11:"–ù–æ—è–±—Ä—å",12:"–î–µ–∫–∞–±—Ä—å"
    }[now.month]
    date_str = now.strftime("%d.%m.%Y")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    operation = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if amount >= 0 else "–¢—Ä–∞—Ç–∞"

    row = [
        year,
        month,
        entry["bank"],
        operation,
        date_str,
        f"{amount:.2f}".replace(".", ","),  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å 2 –∑–Ω–∞–∫–∞–º–∏
        "–°—Ç–∞—Ä—Ç",
        "-",
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
    ws.append_row(row, value_input_option="USER_ENTERED")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    entry_row = len(ws.col_values(1))  # –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
    context.user_data["bank_entry"]["row"] = entry_row

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –±–∞–Ω–∫–æ–≤
    context.user_data.setdefault("new_banks", []).append(entry.copy())

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ü–∏–∏: –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë, –ò–∑–º–µ–Ω–∏—Ç—å, –ì–æ—Ç–æ–≤–æ
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫",    callback_data="add_more"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="edit_entry"),
        ],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ",               callback_data="finish_setup")],
    ]
    await update.message.reply_text(
        f"‚úÖ {operation} –±–∞–Ω–∫–∞ <b>{entry['bank']}</b> ‚Äî <b>{amount:.2f}</b>.",
        parse_mode="HTML",
    )
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_OPTION


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é –æ–ø—Ü–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    # –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "add_more":
        return await show_banks_menu(update, context)

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    if data == "edit_entry":
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        keyboard = [
            [
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫", callback_data="edit_bank"),
                InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="edit_amount"),
            ]
        ]
        await query.edit_message_text("‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_BANK_EDIT_CHOICE

    # –ó–∞–∫–æ–Ω—á–∏—Ç—å —ç—Ç–∞–ø
    if data == "finish_setup":
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
        lines = []
        for e in context.user_data.get("new_banks", []):
            amt = f"{e['amount']:.2f}"
            lines.append(f"‚Ä¢ {e['bank']}: {amt}")
        summary = "\n".join(lines) or "‚Äì –Ω–∏—á–µ–≥–æ ‚Äì"
        await query.edit_message_text(
            "üéâ –ë–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + summary
        )
        return ConversationHandler.END

    # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî —Ç–æ –∂–µ, —á—Ç–æ finish
    if data == "skip_add":
        return await handle_bank_option(update, context)

    # –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ
    await query.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    return STATE_BANK_OPTION


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.6 –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    entry = context.user_data["bank_entry"]
    if data == "edit_bank":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
        context.user_data["editing_field"] = "bank"
        return STATE_BANK_EDIT_INPUT
    if data == "edit_amount":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:")
        context.user_data["editing_field"] = "amount"
        return STATE_BANK_EDIT_INPUT

    # –í–æ–∑–≤—Ä–∞—Ç –≤ –æ–ø—Ü–∏–∏
    return await handle_bank_option(update, context)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.7 –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    field = context.user_data.get("editing_field")
    entry = context.user_data["bank_entry"]
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    row = entry["row"]

    if field == "bank":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        entry["bank"] = text
        ws.update_cell(row, 3, text)

    elif field == "amount":
        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        try:
            amount = float(text.replace(",", "."))
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ -456,67")
            return STATE_BANK_EDIT_INPUT

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ entry –∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ —á–∏—Å–ª–æ
        entry["amount"] = amount
        ws.update_cell(row, 6, amount)  # –ø–µ—Ä–µ–¥–∞—ë–º float, Google Sheets —Å–æ—Ö—Ä–∞–Ω–∏—Ç —á–∏—Å–ª–æ

    # –î—É–±–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ new_banks, —á—Ç–æ–±—ã –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –±—Ä–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for e in context.user_data.get("new_banks", []):
        if e.get("row") == row:
            e["bank"]   = entry["bank"]
            e["amount"] = entry["amount"]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    formatted_amount = f"{entry['amount']:.2f}".replace(".", ",")

    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop("editing_field", None)

    # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫",    callback_data="add_more"),
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="edit_entry"),
        ],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ",               callback_data="finish_setup")],
    ]
    # –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ –±–∞–Ω–∫, –∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—É–º–º—É
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {entry['bank']} ‚Äî {formatted_amount}"
    )
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_OPTION


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.8 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def register_banks_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("banks", show_banks_menu)],
        states={
            STATE_BANK_MENU:        [CallbackQueryHandler(handle_bank_menu)],
            STATE_BANK_CUSTOM:      [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_custom)],
            STATE_BANK_AMOUNT:      [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_amount)],
            STATE_BANK_OPTION:      [CallbackQueryHandler(handle_bank_option)],
            STATE_BANK_EDIT_CHOICE: [CallbackQueryHandler(handle_bank_edit_choice)],
            STATE_BANK_EDIT_INPUT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_edit_input)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
