# handlers/banks.py ‚Äî —ç—Ç–∞–ø 3: –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤

from datetime import datetime
import calendar

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from utils.constants import STATE_BANK_CHOOSE, STATE_BANK_AMOUNT
from services.sheets_service import open_finance_and_plans

# 3.7 –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–Ω–∫–æ–≤
async def show_banks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = "üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞:"
    keyboard = [
        [
            InlineKeyboardButton("–°–±–µ—Ä", callback_data="bank_–°–±–µ—Ä"),
            InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="bank_–¢–∏–Ω—å–∫–æ—Ñ—Ñ"),
        ],
        [
            InlineKeyboardButton("–ê–ª—å—Ñ–∞", callback_data="bank_–ê–ª—å—Ñ–∞"),
            InlineKeyboardButton("–ú–ö–ë", callback_data="bank_–ú–ö–ë"),
        ],
        [
            InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="bank_custom"),
        ],
        [
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        ],
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_CHOOSE

# 3.8 –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –±–∞–Ω–∫
async def handle_bank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == "support":
        await query.message.reply_text("üìß –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: financebot365@gmail.com")
        return STATE_BANK_CHOOSE

    if choice.startswith("bank_"):
        bank = choice.split("_", 1)[1]
        context.user_data["bank"] = bank
        await query.edit_message_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –±–∞–Ω–∫–∞ <b>{bank}</b>:",
            parse_mode="HTML"
        )
        return STATE_BANK_AMOUNT

    # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    await query.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    return STATE_BANK_CHOOSE

# 3.9 –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —Å—É–º–º—ã
async def handle_bank_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    try:
        amount = float(text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000")
        return STATE_BANK_AMOUNT

    bank = context.user_data["bank"]
    sheet_url = context.user_data.get("sheet_url")
    if not sheet_url:
        await update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /setup.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª
    finance_ws, _ = open_finance_and_plans(sheet_url)

    now = datetime.now()
    year = now.year
    month = calendar.month_name[now.month]
    date_str = now.strftime("%d.%m.%Y")

    # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    row = [year, month, bank, "–ü–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", date_str, amount, "–ü–µ—Ä–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", "-"]
    finance_ws.append_row(row, value_input_option="USER_ENTERED")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫", callback_data="add_more")],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_setup")],
    ]
    await update.message.reply_text(
        f"‚úÖ –ë–∞–Ω–∫ <b>{bank}</b> –¥–æ–±–∞–≤–ª–µ–Ω —Å –±–∞–ª–∞–Ω—Å–æ–º <b>{amount}</b>.",
        parse_mode="HTML"
    )
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return ConversationHandler.END

# 3.10 –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë¬ª / ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª
async def handle_after_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "add_more":
        return await show_banks_menu(update, context)
    if query.data == "finish_setup":
        await query.edit_message_text("üéâ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return ConversationHandler.END
    return ConversationHandler.END

def register_banks_handlers(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è —ç—Ç–∞–ø–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤ (/banks).
    """
    conv = ConversationHandler(
        entry_points=[CommandHandler("banks", show_banks_menu)],
        states={
            STATE_BANK_CHOOSE: [CallbackQueryHandler(handle_bank_choice)],
            STATE_BANK_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_amount)],
        },
        fallbacks=[CallbackQueryHandler(handle_after_add)],
        allow_reentry=True,
    )
    app.add_handler(conv)
