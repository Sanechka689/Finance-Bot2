# handlers/menu_banks.py

from datetime import datetime
import pytz

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from utils.constants import (
    STATE_BANK_MENU,
    STATE_BANK_CUSTOM,
    STATE_BANK_AMOUNT,
    STATE_BANK_OPTION,
    STATE_BANK_EDIT_CHOICE,
    STATE_BANK_EDIT_INPUT,
)
from services.sheets_service import open_finance_and_plans


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.1 –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–Ω–∫–æ–≤ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def show_banks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤.
    """
    # 1) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à –Ω–æ–≤—ã—Ö –±–∞–Ω–∫–æ–≤
    context.user_data.setdefault("pending_banks", [])

    # 2) –ü–æ–¥–¥–µ—Ä–∂–∫–∞ callback_query (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    query = update.callback_query
    if query:
        await query.answer()

    # 3) –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    if "sheet_url" not in context.user_data:
        if query:
            await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É ‚Äî /setup")
        else:
            await update.effective_message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É ‚Äî /setup")
        return ConversationHandler.END

    # 4) –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ Google Sheets –±–∞–Ω–∫–∏
    finance_ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    existing = finance_ws.col_values(3)[1:]
    unique = sorted(set(existing))

    # 5) –ì–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö (–Ω–æ–≤—ã—Ö) –±–∞–Ω–∫–æ–≤
    pending = context.user_data["pending_banks"]
    pending_lines = [f"‚Ä¢ {e['bank']}: {e['amount']:.2f}" for e in pending]

    # 6) –°—Ç—Ä–æ–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üè¶ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±–∞–Ω–∫–∏: {', '.join(unique) if unique else '–Ω–µ—Ç'}"
    if pending:
        text += "\n\n–ù–æ–≤—ã–µ –ë–∞–Ω–∫–∏:\n" + "\n".join(pending_lines)
    text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:"

    # 7) –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—É–±—Ä–∞–ª–∏ skip_add, –¥–æ–±–∞–≤–∏–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª)
    keyboard = [
        [InlineKeyboardButton("–°–±–µ—Ä",     callback_data="bank_–°–±–µ—Ä"),
         InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ", callback_data="bank_–¢–∏–Ω—å–∫–æ—Ñ—Ñ")],
        [InlineKeyboardButton("–ê–ª—å—Ñ–∞",    callback_data="bank_–ê–ª—å—Ñ–∞"),
         InlineKeyboardButton("–ú–ö–ë",      callback_data="bank_–ú–ö–ë")],
        [InlineKeyboardButton("–ù–∞–ª",      callback_data="bank_–ù–∞–ª"),
         InlineKeyboardButton("–í–¢–ë",      callback_data="bank_–í–¢–ë")],
        [InlineKeyboardButton("–°–≤–æ–π –±–∞–Ω–∫", callback_data="bank_custom")],
    ]
    # 7.1) –ö–Ω–æ–ø–∫–∞ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –µ—Å–ª–∏ –µ—Å—Ç—å pending
    if pending:
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_setup")])
    # 7.2) –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:open")])

    markup = InlineKeyboardMarkup(keyboard)

    # 8) –í—ã–≤–æ–¥–∏–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query:
        await query.edit_message_text(text, reply_markup=markup)
    else:
        await update.effective_message.reply_text(text, reply_markup=markup)

    return STATE_BANK_MENU



# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.2 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    from handlers.menu import show_main_menu

    query = update.callback_query
    await query.answer()
    data = query.data

    # –ù–∞–∑–∞–¥ ‚Üí –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "menu:open":
        await show_main_menu(update, context)
        return ConversationHandler.END

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if data == "support":
        await query.edit_message_text("üìß –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: financebot365@gmail.com")
        return STATE_BANK_MENU

    # –ì–æ—Ç–æ–≤–æ ‚Üí –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ pending, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "finish_setup":
        # 1) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
        ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
        pending = context.user_data.get("pending_banks", [])
        for entry in pending:
            ws.append_row(entry["row_data"], value_input_option="USER_ENTERED")

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –±–∞–Ω–∫–∞–º
        summary = "\n".join(f"‚Ä¢ {e['bank']}: {e['amount']:.2f}" for e in pending) or "‚Äì –Ω–∏—á–µ–≥–æ ‚Äì"

        # 3) –ó–∞—Ç–∏—Ä–∞–µ–º –º–µ–Ω—é –±–∞–Ω–∫–æ–≤ –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
        await query.edit_message_text(f"üéâ –ë–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{summary}")

        # 4) –û—á–∏—â–∞–µ–º –∫—ç—à
        context.user_data["pending_banks"].clear()

        from handlers.menu import _build_main_kb

        # 5) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        return ConversationHandler.END

    # –í—ã–±–æ—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞
    if data == "bank_custom":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        return STATE_BANK_CUSTOM

    # –í—ã–±–æ—Ä –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
    if data.startswith("bank_"):
        bank = data.split("_", 1)[1]
        context.user_data["bank_entry"] = {"bank": bank}
        await query.edit_message_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:", parse_mode="HTML")
        return STATE_BANK_AMOUNT

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥
    await query.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    return STATE_BANK_MENU


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.3 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_custom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    bank = update.message.text.strip()
    context.user_data["bank_entry"] = {"bank": bank}
    await update.message.reply_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:", parse_mode="HTML")
    return STATE_BANK_AMOUNT


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.4 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    try:
        amount = float(text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ -456,67")
        return STATE_BANK_AMOUNT

    entry = context.user_data["bank_entry"]
    entry["amount"] = amount

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    year = now.year
    month = {
        1:"–Ø–Ω–≤–∞—Ä—å",2:"–§–µ–≤—Ä–∞–ª—å",3:"–ú–∞—Ä—Ç",4:"–ê–ø—Ä–µ–ª—å",
        5:"–ú–∞–π",6:"–ò—é–Ω—å",7:"–ò—é–ª—å",8:"–ê–≤–≥—É—Å—Ç",
        9:"–°–µ–Ω—Ç—è–±—Ä—å",10:"–û–∫—Ç—è–±—Ä—å",11:"–ù–æ—è–±—Ä—å",12:"–î–µ–∫–∞–±—Ä—å"
    }[now.month]
    date_str = now.strftime("%d.%m.%Y")
    operation = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if amount >= 0 else "–¢—Ä–∞—Ç–∞"

    row = [
        year, month, entry["bank"], operation,
        date_str, f"{amount:.2f}".replace(".", ","), "–°—Ç–∞—Ä—Ç", "-"
    ]
    # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ ‚Äî –∫–ª–∞–¥—ë–º –≤ –∫—ç—à
    pending = context.user_data["pending_banks"]
    pending.append({
        "bank": entry["bank"],
        "amount": amount,
        "row_data": row
    })
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data["bank_entry"]["index"] = len(pending) - 1

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫",    callback_data="add_more"),
         InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="edit_entry")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ",               callback_data="finish_setup")],
    ]
    await update.message.reply_text(
        f"‚úÖ {operation} –±–∞–Ω–∫–∞ <b>{entry['bank']}</b> ‚Äî <b>{amount:.2f}</b>.",
        parse_mode="HTML",
    )
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_OPTION


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.5 –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –º–µ–Ω—é –æ–ø—Ü–∏–π ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_option(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    from handlers.menu import show_main_menu

    query = update.callback_query
    await query.answer()
    data = query.data

    # –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫
    if data == "add_more":
        return await show_banks_menu(update, context)

    # –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
    if data == "edit_entry":
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫",  callback_data="edit_bank"),
             InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="edit_amount")],
        ]
        await query.edit_message_text("‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
        return STATE_BANK_EDIT_CHOICE

    # –ì–æ—Ç–æ–≤–æ ‚Äî —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤ STATE_BANK_MENU, –∏ –≤ STATE_BANK_OPTION
    if data == "finish_setup":
        # 1) –ü–∏—à–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –±–∞–Ω–∫–∏ –≤ Google Sheets
        ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
        pending = context.user_data.get("pending_banks", [])
        for entry in pending:
            ws.append_row(entry["row_data"], value_input_option="USER_ENTERED")

        # 2) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –±–∞–Ω–∫–∞–º
        summary = "\n".join(f"‚Ä¢ {e['bank']}: {e['amount']:.2f}" for e in pending) or "‚Äì –Ω–∏—á–µ–≥–æ ‚Äì"

        # 3) –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
        await query.edit_message_text(f"üéâ –ë–∞–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{summary}")

        # 4) –û—á–∏—â–∞–µ–º –∫—ç—à
        context.user_data["pending_banks"].clear()

        # 5) –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        return ConversationHandler.END

    # –í–≤–æ–¥ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞
    if data == "bank_custom":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞:")
        return STATE_BANK_CUSTOM

    # –í—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–∞–Ω–∫–∞
    if data.startswith("bank_"):
        bank = data.split("_", 1)[1]
        context.user_data["bank_entry"] = {"bank": bank}
        await query.edit_message_text(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è <b>{bank}</b>:", parse_mode="HTML")
        return STATE_BANK_AMOUNT

    # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    await query.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
    return STATE_BANK_MENU


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.6 –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data

    entry = context.user_data["bank_entry"]
    if data == "edit_bank":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
        context.user_data["editing_field"] = "bank"
        return STATE_BANK_EDIT_INPUT
    if data == "edit_amount":
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:")
        context.user_data["editing_field"] = "amount"
        return STATE_BANK_EDIT_INPUT

    return await handle_bank_option(update, context)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.7 –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_bank_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    field = context.user_data.get("editing_field")
    entry = context.user_data["bank_entry"]
    
    # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ –∫—ç—à–µ
    pending = context.user_data["pending_banks"]
    index = context.user_data["bank_entry"]["index"]
    entry_cache = pending[index]

    if field == "bank":
        entry_cache["bank"] = text
        # —Å—Ç–æ–ª–±–µ—Ü 3 –≤ row_data
        entry_cache["row_data"][2] = text
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è consistency
        context.user_data["bank_entry"]["bank"] = text

    elif field == "amount":
        try:
            amount = float(text.replace(",", "."))
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ -456,67")
            return STATE_BANK_EDIT_INPUT
        entry_cache["amount"] = amount
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –≤ –∫—ç—à–µ
        entry_cache["amount"] = amount
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –¢—Ä–∞—Ç–∞
        operation = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if amount >= 0 else "–¢—Ä–∞—Ç–∞"
        entry_cache["row_data"][3] = operation  # –∏–Ω–¥–µ–∫—Å 3 ‚Äî —ç—Ç–æ —Å—Ç–æ–ª–±–µ—Ü "–û–ø–µ—Ä–∞—Ü–∏—è"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ –∫—ç—à–µ
        formatted = f"{amount:.2f}".replace(".", ",")
        entry_cache["row_data"][5] = formatted  # –∏–Ω–¥–µ–∫—Å 5 ‚Äî —ç—Ç–æ —Å—Ç–æ–ª–±–µ—Ü "–°—É–º–º–∞"
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ç–æ–∂–µ
        context.user_data["bank_entry"]["amount"] = amount

    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop("editing_field", None)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –º–µ–Ω—é –æ–ø—Ü–∏–π
    formatted_amount = f"{entry_cache['amount']:.2f}".replace(".", ",")
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫",    callback_data="add_more"),
         InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="edit_entry")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ",               callback_data="finish_setup")],
    ]
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {entry_cache['bank']} ‚Äî {formatted_amount}"
    )
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_OPTION


    for e in context.user_data.get("new_banks", []):
        if e.get("row") == row:
            e["bank"] = entry["bank"]
            e["amount"] = entry["amount"]

    formatted_amount = f"{entry['amount']:.2f}".replace(".", ",")

    context.user_data.pop("editing_field", None)

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –±–∞–Ω–∫",    callback_data="add_more"),
         InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="edit_entry")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ",               callback_data="finish_setup")],
    ]
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {entry['bank']} ‚Äî {formatted_amount}"
    )
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_BANK_OPTION


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 3.8 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–∞ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

def register_menu_banks_handlers(app):
    conv = ConversationHandler(
        entry_points=[
            CommandHandler("banks",    show_banks_menu),
            CallbackQueryHandler(show_banks_menu, pattern=r"^menu:add_bank$")],
        states={
            STATE_BANK_MENU:        [CallbackQueryHandler(handle_bank_menu)],
            STATE_BANK_CUSTOM:      [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_custom)],
            STATE_BANK_AMOUNT:      [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_amount)],
            STATE_BANK_OPTION:      [CallbackQueryHandler(handle_bank_option)],
            STATE_BANK_EDIT_CHOICE: [CallbackQueryHandler(handle_bank_edit_choice)],
            STATE_BANK_EDIT_INPUT:  [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank_edit_input)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
    app.add_handler(conv)
