# handlers/classification.py

import calendar
import re
from datetime import datetime, date
from typing import Optional, Dict

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from services.sheets_service import open_finance_and_plans
from utils.constants import STATE_CLASS_MENU

# –ö–∞—Ä—Ç–∞ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–∂–∞ –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –Ω–æ–º–µ—Ä
GENITIVE_MONTHS = {
    "—è–Ω–≤–∞—Ä—è":   1, "—Ñ–µ–≤—Ä–∞–ª—è":  2, "–º–∞—Ä—Ç–∞":    3, "–∞–ø—Ä–µ–ª—è": 4,
    "–º–∞—è":      5, "–∏—é–Ω—è":     6, "–∏—é–ª—è":     7, "–∞–≤–≥—É—Å—Ç–∞":8,
    "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è":  11, "–¥–µ–∫–∞–±—Ä—è":12,
}

# –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
RUS_MONTHS = [
    None, "—è–Ω–≤–∞—Ä—å","—Ñ–µ–≤—Ä–∞–ª—å","–º–∞—Ä—Ç","–∞–ø—Ä–µ–ª—å","–º–∞–π","–∏—é–Ω—å",
          "–∏—é–ª—å","–∞–≤–≥—É—Å—Ç","—Å–µ–Ω—Ç—è–±—Ä—å","–æ–∫—Ç—è–±—Ä—å","–Ω–æ—è–±—Ä—å","–¥–µ–∫–∞–±—Ä—å"
]


def parse_sheet_date(s: str) -> Optional[date]:
    """
    –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏–∑ Google Sheets:
      - DD.MM.YYYY
      - YYYY-MM-DD
      - MM/DD/YYYY
      - ¬´DD –º–µ—Å—è—Ü, ...¬ª (—Ä—É—Å—Å–∫–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂, –±–µ–∑ –≥–æ–¥–∞ ‚Üí —Ç–µ–∫—É—â–∏–π –≥–æ–¥)
    """
    s = s.strip()
    # DD.MM.YYYY
    if re.match(r"^\d{2}\.\d{2}\.\d{4}$", s):
        d, m, y = map(int, s.split("."))
        return date(y, m, d)

    # YYYY-MM-DD
    if re.match(r"^\d{4}-\d{2}-\d{2}$", s):
        y, m, d = map(int, s.split("-"))
        return date(y, m, d)

    # MM/DD/YYYY
    try:
        return datetime.strptime(s, "%m/%d/%Y").date()
    except:
        pass

    # –†—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç ¬´13 –∏—é–ª—è, –≤—Å¬ª –∏–ª–∏ ¬´13 –∏—é–ª—è¬ª
    m = re.match(r"^(\d{1,2})\s+([–ê-–Ø–∞-—è]+)(?:\,.*)?$", s)
    if m:
        day = int(m.group(1))
        month_name = m.group(2).lower()
        month = GENITIVE_MONTHS.get(month_name)
        if month:
            year = date.today().year
            return date(year, month, day)
    # ISO-—Ñ–æ—Ä–º–∞—Ç
    try:
        return datetime.fromisoformat(s).date()
    except:
        return None


def aggregate_by_period(
    rows: list,
    start: Optional[date],
    end:   Optional[date]
) -> Dict[str, float]:
    """
    –°—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É –ø–æ –∫–∞–∂–¥–æ–π –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–æ–ª–±–µ—Ü G, –∏–Ω–¥–µ–∫—Å 6)
    –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start, end] –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü–∞ None ‚Äî –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞.
    """
    data: Dict[str, float] = {}
    for r in rows:
        dt = parse_sheet_date(r[4])
        if not dt:
            continue
        if start and dt < start:
            continue
        if end   and dt > end:
            continue

        cls = r[6].strip() or "‚Äî"
        raw = str(r[5]).replace("\xa0", "").replace(" ", "").replace(",", ".")
        try:
            amt = float(raw)
        except:
            continue

        data[cls] = data.get(cls, 0.0) + amt
    return data


async def start_classification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü."""
    q = update.callback_query
    await q.answer()

    url = context.user_data.get("sheet_url")
    if not url:
        return await q.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")

    # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –ª–∏—Å—Ç–∞ ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª
    ws, _ = open_finance_and_plans(url)
    rows = ws.get_all_values()[1:]

    today = date.today()
    # –ì—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    first = date(today.year, today.month, 1)
    last_day = calendar.monthrange(today.year, today.month)[1]
    last  = date(today.year, today.month, last_day)

    data = aggregate_by_period(rows, first, last)
    items = sorted(data.items(), key=lambda x: x[1])

    header = f"üè∑Ô∏è *–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ {RUS_MONTHS[today.month]} {today.year}:*"
    if not items:
        body = "‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü ‚Äî"
    else:
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –∑–∞–ø—è—Ç–æ–π
        body = "\n".join(
            f"{i+1}. {cls} ‚Äî {amt:,.2f}"
            .replace(",", "X").replace(".", ",").replace("X", " ")
            for i, (cls, amt) in enumerate(items)
        )

    text = f"{header}\n{body}"

    kb = [
        [
            InlineKeyboardButton("–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="class_prev"),
            InlineKeyboardButton("–ó–∞ –≥–æ–¥"               , callback_data="class_year"),
        ],
        [
            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"         , callback_data="class_all"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥"             , callback_data="class_back"),
        ],
    ]
    await q.edit_message_text(text, parse_mode="Markdown",
                              reply_markup=InlineKeyboardMarkup(kb))
    return STATE_CLASS_MENU


async def handle_class_period(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç class_prev / class_year / class_all –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç."""
    q = update.callback_query
    await q.answer()

    period = q.data  # class_prev / class_year / class_all
    url = context.user_data.get("sheet_url")
    ws, _ = open_finance_and_plans(url)
    rows = ws.get_all_values()[1:]

    today = date.today()
    if period == "class_prev":
        # –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        pm = today.month - 1 or 12
        py = today.year if today.month > 1 else today.year - 1
        first = date(py, pm, 1)
        last_day = calendar.monthrange(py, pm)[1]
        last  = date(py, pm, last_day)
        period_name = f"–ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü ({RUS_MONTHS[pm]} {py})"

    elif period == "class_year":
        first = date(today.year, 1, 1)
        last  = today
        period_name = f"—Ç–µ–∫—É—â–∏–π –≥–æ–¥ ({today.year})"

    else:  # class_all
        first = None
        last  = None
        period_name = "–≤—Å—ë –≤—Ä–µ–º—è"

    data = aggregate_by_period(rows, first, last)
    items = sorted(data.items(), key=lambda x: x[1])

    header = f"üè∑Ô∏è *–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ {period_name}:*"
    if not items:
        body = "‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî"
    else:
        body = "\n".join(
            f"{i+1}. {cls} ‚Äî {amt:,.2f}"
            .replace(",", "X").replace(".", ",").replace("X", " ")
            for i, (cls, amt) in enumerate(items)
        )

    text = f"{header}\n{body}"

    kb = [
        [
            InlineKeyboardButton("–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", callback_data="class_prev"),
            InlineKeyboardButton("–ó–∞ –≥–æ–¥"               , callback_data="class_year"),
        ],
        [
            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è"         , callback_data="class_all"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥"             , callback_data="class_back"),
        ],
    ]
    await q.edit_message_text(text, parse_mode="Markdown",
                              reply_markup=InlineKeyboardMarkup(kb))
    return STATE_CLASS_MENU


async def handle_class_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    q = update.callback_query
    await q.answer()
    from handlers.menu import show_main_menu
    return await show_main_menu(update, context)
