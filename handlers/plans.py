# handlers/plans.py

import calendar
from datetime import date, datetime
from typing import Optional, Dict
from utils.constants import STATE_PLAN_DATE

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from telegram.ext import ConversationHandler
import math

from services.sheets_service import open_finance_and_plans
from utils.constants import (
    STATE_PLAN_MENU,
    STATE_PLAN_ADD,
    STATE_PLAN_DATE,
    STATE_PLAN_AMOUNT,
    STATE_PLAN_CLASSIFICATION,
    STATE_PLAN_SPECIFIC,
    STATE_PLAN_CONFIRM,
    STATE_PLAN_COPY,
    STATE_OP_MENU,
)
from handlers.classification import parse_sheet_date
from handlers.operations import RU_MONTHS

import asyncio
from gspread.exceptions import APIError

import logging #_____–õ–æ–≥–∏
logger = logging.getLogger(__name__) #_____–õ–æ–≥–∏

def init_pending_plan(context):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞.
    """
    context.user_data["pending_plan"] = {
        "–ì–æ–¥":           None,
        "–ú–µ—Å—è—Ü":         None,
        "–ë–∞–Ω–∫":          "–ü–ª–∞–Ω—ã",
        "–û–ø–µ—Ä–∞—Ü–∏—è":      "–ü–ª–∞–Ω",
        "–î–∞—Ç–∞":          None,
        "–°—É–º–º–∞":         None,
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": None,
        "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":    None,
    }


async def handle_plan_fill_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üìÖ –î–∞—Ç–∞¬ª ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    q = update.callback_query
    await q.answer()
    from handlers.operations import create_calendar
    today = date.today()
    kb = create_calendar(today.year, today.month)
    await q.edit_message_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞–Ω–∞:*",
        parse_mode="Markdown",
        reply_markup=kb
    )
    return STATE_PLAN_DATE


async def handle_plan_fill_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üí∞ –°—É–º–º–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞–Ω–∞* :",
        parse_mode="Markdown"
    )
    return STATE_PLAN_AMOUNT


# 3) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ‚Äî –≤—ã–≤–æ–¥–∏–º –¥–æ 9 –∫–Ω–æ–ø–æ–∫ –≤ 3 —Ä—è–¥–∞
async def handle_plan_fill_classification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()

    # –°–æ–±–∏—Ä–∞–µ–º –¥–æ 9 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    _, ws_plans = open_finance_and_plans(context.user_data["sheet_url"])
    rows = ws_plans.get_all_values()[1:]
    all_cls = {r[7] for r in rows if r[7]}
    popular = sorted(all_cls)[:9]  # –ø–µ—Ä–≤—ã–µ 9

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–∏ —Ä—è–¥–∞ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    buttons = [
        InlineKeyboardButton(c, callback_data=f"plans:class_{c}")
        for c in popular
    ]
    kb_rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    kb = InlineKeyboardMarkup(kb_rows)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ chat_id/message_id
    await q.edit_message_text(
        "üè∑Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é* –∏–∑ —Å–ø–∏—Å–∫–∞ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ç–µ–∫—Å—Ç–æ–º):",
        parse_mode="Markdown",
        reply_markup=kb
    )
    context.user_data["last_plan_kb"] = {
        "chat_id": q.message.chat.id,
        "message_id": q.message.message_id
    }
    return STATE_PLAN_CLASSIFICATION



async def handle_plan_fill_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.
    """
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "üìÑ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É* –¥–ª—è –ø–ª–∞–Ω–∞:",
        parse_mode="Markdown"
    )
    return STATE_PLAN_SPECIFIC


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å –ø–æ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
async def show_plan_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        send = q.edit_message_text
    else:
        send = update.message.reply_text

    pending = context.user_data.setdefault("pending_plan", {})
    text = "üìã *–ù–æ–≤—ã–π –ø–ª–∞–Ω:*\n"
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π: (–ò–º—è, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, callback-action)
    fields = [
        ("–î–∞—Ç–∞",           pending.get("–î–∞—Ç–∞")          or "‚Äî", "fill_date"),
        ("–°—É–º–º–∞",          pending.get("–°—É–º–º–∞")         or "‚Äî", "fill_amount"),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  pending.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è") or "‚Äî", "fill_classification"),
        ("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     pending.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞")    or "‚Äî", "fill_specific"),
    ]
    emojis = {"–î–∞—Ç–∞":"üìÖ","–°—É–º–º–∞":"üí∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":"üè∑Ô∏è","–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":"üìÑ"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    for name, val, _ in fields:
        text += f"{emojis[name]} *{name}:* {val}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    edit_buttons = [
        InlineKeyboardButton(f"{emojis[name]} {name}", callback_data=f"plans:{action}")
        for name, _, action in fields
    ]
    kb = [
        edit_buttons[0:2],  # –ø–µ—Ä–≤–∞—è –ø–∞—Ä–∞: –î–∞—Ç–∞ + –°—É–º–º–∞
        edit_buttons[2:4],  # –≤—Ç–æ—Ä–∞—è –ø–∞—Ä–∞: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è + –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
    ]

    # –ö–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
    btns = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="plans:cancel")]
    if pending.get("–î–∞—Ç–∞") and pending.get("–°—É–º–º–∞") and pending.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"):
        btns.append(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="plans:save"))
    kb.append(btns)

    await send(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
    return STATE_PLAN_ADD


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª (–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤)
async def handle_plan_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    from handlers.menu import show_main_menu
    return await show_main_menu(update, context)


async def start_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    """
    q = update.callback_query

    # ‚ö†Ô∏è –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ —á–∞—Å—Ç–æ –ø–∞–¥–∞–µ—Ç "–ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–≤–µ—á–µ–Ω–æ".
    if q:
        try:
            await q.answer()
        except Exception as e:
            logger.debug("start_plans: q.answer() skipped: %s", e)

    url = context.user_data.get("sheet_url")
    if not url:
        # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –±–µ–∑ callback (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if q:
            return await q.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")
        else:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")
            return STATE_PLAN_MENU

    # 1) –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç ¬´–ü–ª–∞–Ω—ã¬ª (–æ–Ω –≤—Ç–æ—Ä–æ–π –≤ –∫–æ—Ä—Ç–µ–∂–µ)
    _, ws_plans = open_finance_and_plans(url)
    all_plans = ws_plans.get_all_values()[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

    today = date.today()
    year, month = today.year, today.month

    # 2) –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø–æ –¥–∞—Ç–µ; –∫–æ–ª–æ–Ω–∫–∏:
    #    0:–ì–æ–¥, 1:–ú–µ—Å—è—Ü, 4:–î–∞—Ç–∞, 5:–°—É–º–º–∞, 6:–û—Å—Ç–∞—Ç–æ–∫, 7:–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    display = []
    for r in all_plans:
        dt = parse_sheet_date(r[4])
        if dt and dt.year == year and dt.month == month:
            display.append({
                "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":  r[7] or "‚Äî",
                "–°—É–º–º–∞":          r[5] or "0",
                "–û—Å—Ç–∞—Ç–æ–∫":        r[6] or "0"
            })

    # 3) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not display:
        body = "‚Äî –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü ‚Äî"
    else:
        lines = [
            f"{i}. {p['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}¬†‚Äî {p['–°—É–º–º–∞']}¬†‚Äî {p['–û—Å—Ç–∞—Ç–æ–∫']}"
            for i, p in enumerate(display, 1)
        ]
        body = "\n".join(lines)

    # 4) –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä—É—Å—Å–∫–∏–º –º–µ—Å—è—Ü–µ–º
    header = f"üóì *–ü–ª–∞–Ω—ã –Ω–∞ {RU_MONTHS[month]} {year}:*\n{body}"

    # ‚Äî‚Äî –°–≤–æ–¥–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º –∏ —Ñ–∞–∫—Ç—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ ‚Äî‚Äî

    def fmt(x: float) -> str:
        s = f"{x:,.2f}"
        s = s.replace(",", "X").replace(".", ",").replace("X", " ")
        return s

    # —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—ã, –ø—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –ø—Ä–æ–±–µ–ª—ã –∏ NBSP
    def to_float(s: str) -> float:
        clean = s.replace("\xa0", "").replace(" ", "").replace(",", ".")
        return float(clean or "0")

    plan_sum  = sum(to_float(p["–°—É–º–º–∞"])   for p in display)
    fact_sum  = sum(to_float(p["–û—Å—Ç–∞—Ç–æ–∫"]) for p in display)

    fin_ws, _   = open_finance_and_plans(url)
    fin_rows    = fin_ws.get_all_values()[1:]
    bank_total  = sum(to_float(r[5])      for r in fin_rows if r[5])

    combined = bank_total + fact_sum

    summary = (
        "\n\nüí° *–°–≤–æ–¥–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º –∏ —Ñ–∞–∫—Ç—É:*\n"
        f"üìù –ü–æ –ø–ª–∞–Ω—É: *{fmt(plan_sum)}*‚ÄØ‚ÇΩ\n"
        f"üìà –ü–æ —Ñ–∞–∫—Ç—É: *{fmt(fact_sum)}*‚ÄØ‚ÇΩ\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: *{fmt(combined)}*‚ÄØ‚ÇΩ"
    )

    # 5) –ö–Ω–æ–ø–∫–∏
    kb = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å",        callback_data="plans:add")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω—ã", callback_data="plans:copy")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",           callback_data="plans:cancel")],
    ]

    # 6) –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ + —Å–≤–æ–¥–∫—É + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = header + summary
    markup = InlineKeyboardMarkup(kb)

    if q:
        try:
            await q.edit_message_text(
                text,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, callback —É–∂–µ "–∑–∞–∫—Ä—ã—Ç"),
            # –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—É–ª—Å—è –∫ "–ü–ª–∞–Ω–∞–º"
            logger.warning("start_plans: edit_message_text failed, sending new message: %s", e)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                parse_mode="Markdown",
                reply_markup=markup
            )
    else:
        await update.message.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=markup
        )

    return STATE_PLAN_MENU


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
async def handle_plan_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    init_pending_plan(context)
    return await show_plan_card(update, context)

# –î–∞—Ç–∞
async def handle_plan_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    q = update.callback_query
    await q.answer()
    _, iso = q.data.split("|", 1)
    dt = datetime.fromisoformat(iso).date()
    pending = context.user_data["pending_plan"]
    pending["–î–∞—Ç–∞"]  = f"{dt.day:02d}.{dt.month:02d}.{dt.year}"
    pending["–ì–æ–¥"]   = str(dt.year)
    pending["–ú–µ—Å—è—Ü"] = RU_MONTHS[dt.month]
    return await show_plan_card(update, context)

# –ö–∞–ª–µ–Ω–¥–∞—Ä—å
async def change_plan_calendar_month(update: Update,context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏ < –∏ > –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–ª–∞–Ω–∞.
    –û–∂–∏–¥–∞–µ—Ç callback_data –≤–∏–¥–∞ 'calendar|YYYY|M' –∏–ª–∏ 'calendar|YYYY|MM'.
    """
    q = update.callback_query
    await q.answer()

    # q.data: 'calendar|2025|6' –∏–ª–∏ 'calendar|2025|12'
    _, year_str, month_str = q.data.split("|")
    year, month = int(year_str), int(month_str)

    from handlers.operations import create_calendar
    kb = create_calendar(year, month)

    await q.edit_message_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞–Ω–∞:*",
        parse_mode="Markdown",
        reply_markup=kb
    )
    return STATE_PLAN_DATE


# –°—É–º–º–∞
async def handle_plan_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë (–ª—é–±–æ–µ —á–∏—Å–ª–æ: + –∏–ª–∏ -) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º –∂–µ —à–∞–≥–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥.
    """
    text = update.message.text.strip()
    try:
        # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ, –¥–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—è—Ç—É—é
        amt = float(text.replace(",", "."))
    except ValueError:
        # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –æ—Å—Ç–∞—ë–º—Å—è –≤ STATE_PLAN_AMOUNT
        await update.message.reply_text(
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ **–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ** (–Ω–∞–ø—Ä–∏–º–µ—Ä `-5000` –∏–ª–∏ `2500`).",
            parse_mode="Markdown"
        )
        return STATE_PLAN_AMOUNT

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–∏—Å–ª–æ (–¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º)
    context.user_data["pending_plan"]["–°—É–º–º–∞"] = amt

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    return await show_plan_card(update, context)



# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
async def handle_plan_class_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ ¬´plans:class_<–∑–Ω–∞—á–µ–Ω–∏–µ>¬ª:
    - –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 'other' ‚Äî –ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    - –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    q = update.callback_query
    await q.answer()

    # –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "plans:class_"
    _, cls = q.data.split("_", 1)  

    if cls == "other":
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        await q.edit_message_text(
            "üè∑Ô∏è *–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é* –¥–ª—è –ø–ª–∞–Ω–∞:",
            parse_mode="Markdown"
        )
        # –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–π–º–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        return STATE_PLAN_CLASSIFICATION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    context.user_data["pending_plan"]["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = cls
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    return await show_plan_card(update, context)


# 4) –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def handle_plan_custom_class(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 1) –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Äë–∫–Ω–æ–ø–æ–∫ (–µ—Å–ª–∏ –±—ã–ª–æ)
    kb = context.user_data.pop("last_plan_kb", None)
    if kb:
        try:
            await context.bot.delete_message(
                chat_id=kb["chat_id"],
                message_id=kb["message_id"]
            )
        except:
            pass

    # 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
    text = update.message.text.strip() or "-"
    context.user_data["pending_plan"]["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = text

    # 3) –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–ª–∞–Ω–∞
    return await show_plan_card(update, context)


# –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
async def handle_plan_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    text = update.message.text.strip()
    context.user_data["pending_plan"]["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"] = text or "-"
    return await show_plan_card(update, context)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Google –∑–∞–ø–∏—Å–∏
async def handle_plan_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    logger.info(
        "handle_plan_save: callback_data=%s, user_data.sheet_url=%s",
        q.data, context.user_data.get("sheet_url")
    )

    url = context.user_data.get("sheet_url")
    _, ws_plans = open_finance_and_plans(url)

    row = context.user_data["pending_plan"]

    # 1) –§–æ—Ä–º—É–ª–∞ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–û—Å—Ç–∞—Ç–æ–∫"
    formula = (
        f'=SUMIFS(–§–∏–Ω–∞–Ω—Å—ã!$F:$F;–§–∏–Ω–∞–Ω—Å—ã!$G:$G;INDIRECT("H"&ROW());'
        f'–§–∏–Ω–∞–Ω—Å—ã!$B:$B;INDIRECT("B"&ROW());–§–∏–Ω–∞–Ω—Å—ã!$A:$A;INDIRECT("A"&ROW()))'
        f'-INDIRECT("F"&ROW())'
    )

    # 2) –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    new_row = [
        row["–ì–æ–¥"], row["–ú–µ—Å—è—Ü"], row["–ë–∞–Ω–∫"],
        row["–û–ø–µ—Ä–∞—Ü–∏—è"], row["–î–∞—Ç–∞"], row["–°—É–º–º–∞"],
        formula,
        row["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"], row["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]
    ]

    # 3) –î–æ–±–∞–≤–ª—è–µ–º –∏ —Å—Ä–∞–∑—É —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç "–ü–ª–∞–Ω—ã" –ø–æ –¥–∞—Ç–µ (5-–π —Å—Ç–æ–ª–±–µ—Ü, E)
    ws_plans.append_row(new_row, value_input_option="USER_ENTERED")
    try:
        # gspread: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–æ–Ω–∫–µ E (index=5) –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        ws_plans.sort((5, 'asc'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ ¬´–ü–ª–∞–Ω—ã¬ª: {e}")

        # 4) –°–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await q.message.reply_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

    # 4.1) –°—Ä–∞–∑—É ¬´–∑–∞–∫—Ä—ã–≤–∞–µ–º¬ª –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await q.edit_message_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –ø–ª–∞–Ω—ã‚Ä¶")
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ø–ª–∞–Ω–∞: %s", e)

    # 4.2) –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ ‚Äî –¥–∞—ë–º —Ç–∞–±–ª–∏—Ü–µ/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å—Å—è
    await asyncio.sleep(0.8)

    # 4.3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–ü–ª–∞–Ω—ã¬ª –û–¢–î–ï–õ–¨–ù–´–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –ü–û–°–õ–ï–î–ù–ò–ú)
    async def send_plans_fresh():
        url = context.user_data.get("sheet_url")
        _, ws_plans = open_finance_and_plans(url)
        all_plans = ws_plans.get_all_values()[1:]

        today = date.today()
        year, month = today.year, today.month

        # —Å–æ–±–µ—Ä—ë–º —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        display = []
        for r in all_plans:
            dt = parse_sheet_date(r[4])
            if dt and dt.year == year and dt.month == month:
                display.append({
                    "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":  r[7] or "‚Äî",
                    "–°—É–º–º–∞":          r[5] or "0",
                    "–û—Å—Ç–∞—Ç–æ–∫":        r[6] or "0"
                })

        # —Ç–µ–ª–æ —Å–ø–∏—Å–∫–∞
        if not display:
            body = "‚Äî –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü ‚Äî"
        else:
            lines = [
                f"{i}. {p['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']} ‚Äî {p['–°—É–º–º–∞']} ‚Äî {p['–û—Å—Ç–∞—Ç–æ–∫']}"
                for i, p in enumerate(display, 1)
            ]
            body = "\n".join(lines)

        # –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header = f"üóì *–ü–ª–∞–Ω—ã –Ω–∞ {RU_MONTHS[month]} {year}:*\n{body}"

        # —Å–≤–æ–¥–∫–∞
        def fmt(x: float) -> str:
            s = f"{x:,.2f}"
            return s.replace(",", "X").replace(".", ",").replace("X", " ")

        def to_float(s: str) -> float:
            clean = s.replace("\xa0", "").replace(" ", "").replace(",", ".")
            return float(clean or "0")

        fin_ws, _ = open_finance_and_plans(url)
        fin_rows   = fin_ws.get_all_values()[1:]
        plan_sum   = sum(to_float(p["–°—É–º–º–∞"])   for p in display)
        fact_sum   = sum(to_float(p["–û—Å—Ç–∞—Ç–æ–∫"]) for p in display)
        bank_total = sum(to_float(r[5]) for r in fin_rows if r[5])
        combined   = bank_total + fact_sum

        summary = (
            "\n\nüí° *–°–≤–æ–¥–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º –∏ —Ñ–∞–∫—Ç—É:*\n"
            f"üìù –ü–æ –ø–ª–∞–Ω—É: *{fmt(plan_sum)}* ‚ÇΩ\n"
            f"üìà –ü–æ —Ñ–∞–∫—Ç—É: *{fmt(fact_sum)}* ‚ÇΩ\n"
            f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: *{fmt(combined)}* ‚ÇΩ"
        )

        # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–ü–ª–∞–Ω–æ–≤¬ª
        kb = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å",        callback_data="plans:add")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω—ã", callback_data="plans:copy")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",           callback_data="plans:cancel")],
        ]

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ)
        await context.bot.send_message(
            chat_id=q.message.chat.id,
            text=header + summary,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(kb)
        )

    # –ê–∫–∫—É—Ä–∞—Ç–Ω—ã–µ —Ä–µ—Ç—Ä–∞–∏ –Ω–∞ —Å–ª—É—á–∞–π 429 –æ—Ç Google Sheets
    for delay in (0.0, 1.0, 2.0):
        try:
            await send_plans_fresh()
            break
        except APIError as e:
            code = getattr(getattr(e, "response", None), "status_code", None)
            if code == 429:
                logger.warning("Sheets 429, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ %.1fs", max(delay, 1.0))
                await asyncio.sleep(max(delay, 1.0))
                continue
            raise
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´–ü–ª–∞–Ω—ã¬ª: %s", e)
            break

    return STATE_PLAN_MENU



# –ö–æ–ø–∏—Ä–≤–∞–Ω–∏–µ –ü–ª–∞–Ω–æ–≤
async def handle_plan_copy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥‚ÄØ3: –∫–æ–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π,
    –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥/–º–µ—Å—è—Ü –∏ –≤–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É–ª—É –æ—Å—Ç–∞—Ç–∫–∞.
    """
    q = update.callback_query
    await q.answer()

    url = context.user_data.get("sheet_url")
    _, ws_plans = open_finance_and_plans(url)
    rows = ws_plans.get_all_values()[1:]

    today = date.today()
    prev_month = today.month - 1 or 12
    prev_year  = today.year if today.month > 1 else today.year - 1

    # –¥–∞—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    last_day = calendar.monthrange(today.year, today.month)[1]
    new_date = f"{last_day:02d}.{today.month:02d}.{today.year}"
    new_year  = str(today.year)
    new_month = RU_MONTHS[today.month]  # –ø–æ‚Äë—Ä—É—Å—Å–∫–∏

    to_copy = []
    for r in rows:
        old_dt = parse_sheet_date(r[4])
        if not (old_dt and old_dt.year == prev_year and old_dt.month == prev_month):
            continue

        cls   = r[7]  # –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        plan  = r[5]  # –ø–ª–∞–Ω–æ–≤–∞—è —Å—É–º–º–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
        spec  = r[8]  # –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞

        # –§–æ—Ä–º—É–ª–∞ –æ—Å—Ç–∞—Ç–∫–∞: SUMIFS –ø–æ "–§–∏–Ω–∞–Ω—Å—ã" –º–∏–Ω—É—Å INDIRECT("F"&ROW())
        formula = (
            f'=SUMIFS(–§–∏–Ω–∞–Ω—Å—ã!$F:$F;–§–∏–Ω–∞–Ω—Å—ã!$G:$G;INDIRECT("H"&ROW());'
            f'–§–∏–Ω–∞–Ω—Å—ã!$B:$B;INDIRECT("B"&ROW());–§–∏–Ω–∞–Ω—Å—ã!$A:$A;INDIRECT("A"&ROW()))'
            f'-INDIRECT("F"&ROW())'
        )

        new_row = [
            new_year,         # –≥–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            new_month,        # –º–µ—Å—è—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            r[2],             # –±–∞–Ω–∫
            r[3],             # –û–ø–µ—Ä–∞—Ü–∏—è ("–ü–ª–∞–Ω")
            new_date,         # –¥–∞—Ç–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            plan,             # —Å—É–º–º–∞ (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
            formula,          # –æ—Å—Ç–∞—Ç–æ–∫ ‚Äî –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞
            cls,              # –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
            spec,             # –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
        ]
        to_copy.append(new_row)

    if to_copy:
        ws_plans.append_rows(to_copy, value_input_option="USER_ENTERED")
        # –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
        await q.edit_message_text("üîÑ –ü–ª–∞–Ω—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
    else:
        await q.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–æ—à–ª—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")

    # –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É ¬´–ü–ª–∞–Ω—ã –Ω–∞ ‚Ä¶¬ª
    return await start_plans(update, context)



async def handle_plan_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ 4: –∫–Ω–æ–ø–∫–∞ ¬´üîô –ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    q = update.callback_query
    await q.answer()
    from handlers.menu import show_main_menu
    return await show_main_menu(update, context)

def register_plans_handlers(app):
    conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_plans, pattern=r"^menu:plans$")
        ],
        states={
            STATE_PLAN_MENU: [
                # ‚ûï –î–æ–±–∞–≤–∏—Ç—å
                CallbackQueryHandler(handle_plan_add,     pattern=r"^plans:add$"),
                # üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω—ã
                CallbackQueryHandler(handle_plan_copy,    pattern=r"^plans:copy$"),
                # üîô –ù–∞–∑–∞–¥ ‚Äî —Ç–µ–ø–µ—Ä—å plans:cancel
                CallbackQueryHandler(handle_plan_cancel,  pattern=r"^plans:cancel$"),
                # —Ä–µ–∑–µ—Ä–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π plans:back
                CallbackQueryHandler(handle_plan_cancel,  pattern=r"^plans:back$")
            ],
            STATE_PLAN_ADD: [
                CallbackQueryHandler(handle_plan_fill_date,           pattern=r"^plans:fill_date$"),
                CallbackQueryHandler(handle_plan_fill_amount,         pattern=r"^plans:fill_amount$"),
                CallbackQueryHandler(handle_plan_fill_classification, pattern=r"^plans:fill_classification$"),
                CallbackQueryHandler(handle_plan_fill_specific,       pattern=r"^plans:fill_specific$"),
                CallbackQueryHandler(handle_plan_save,                pattern=r"^plans:save$"),
                CallbackQueryHandler(handle_plan_cancel,              pattern=r"^plans:cancel$")
            ],
            STATE_PLAN_DATE: [
                CallbackQueryHandler(change_plan_calendar_month, pattern=r"^calendar\|\d{4}\|\d{1,2}$"),
                CallbackQueryHandler(handle_plan_date, pattern=r"^select_date\|\d{4}-\d{2}-\d{2}$")
            ],
            STATE_PLAN_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_plan_amount)
            ],
            STATE_PLAN_CLASSIFICATION: [
                CallbackQueryHandler(handle_plan_class_choice, pattern=r"^plans:class_.+$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_plan_custom_class)
            ],
            STATE_PLAN_SPECIFIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_plan_specific)
            ],
        },
        fallbacks=[
            CallbackQueryHandler(handle_plan_cancel, pattern=r"^plans:cancel$")
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
