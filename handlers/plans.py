# handlers/plans.py

import calendar
from datetime import date, datetime
from typing import Optional, Dict

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters

from services.sheets_service import open_finance_and_plans
from utils.constants import (
    STATE_PLAN_MENU,
    STATE_PLAN_ADD,
    STATE_PLAN_DATE,
    STATE_PLAN_AMOUNT,
    STATE_PLAN_CLASSIFICATION,
    STATE_PLAN_SPECIFIC,
    STATE_PLAN_CONFIRM,
    STATE_PLAN_COPY,
    STATE_OP_MENU,
)
from handlers.classification import parse_sheet_date


def init_pending_plan(context):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞.
    """
    context.user_data["pending_plan"] = {
        "–ì–æ–¥":           None,
        "–ú–µ—Å—è—Ü":         None,
        "–ë–∞–Ω–∫":          "–ü–ª–∞–Ω—ã",
        "–û–ø–µ—Ä–∞—Ü–∏—è":      "–ü–ª–∞–Ω",
        "–î–∞—Ç–∞":          None,
        "–°—É–º–º–∞":         None,
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": None,
        "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":    None,
    }


async def handle_plan_fill_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üìÖ –î–∞—Ç–∞¬ª ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    q = update.callback_query
    await q.answer()
    from handlers.operations import create_calendar
    today = date.today()
    kb = create_calendar(today.year, today.month)
    await q.edit_message_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞–Ω–∞:*",
        parse_mode="Markdown",
        reply_markup=kb
    )
    return STATE_PLAN_DATE


async def handle_plan_fill_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üí∞ –°—É–º–º–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ.
    """
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–ª–∞–Ω–∞* (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):",
        parse_mode="Markdown"
    )
    return STATE_PLAN_AMOUNT


async def handle_plan_fill_classification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥.
    """
    q = update.callback_query
    await q.answer()
    banksheet = open_finance_and_plans(context.user_data["sheet_url"])[0]
    rows = banksheet.get_all_values()[1:]
    popular = []
    for r in rows:
        cls = r[6]
        if cls and cls not in popular:
            popular.append(cls)
        if len(popular) >= 10:
            break
    kb = [[InlineKeyboardButton(c, callback_data=f"plans:class_{c}")] for c in popular]
    kb.append([InlineKeyboardButton("–í–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë", callback_data="plans:class_other")])
    await q.edit_message_text(
        "üè∑Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é* –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return STATE_PLAN_CLASSIFICATION


async def handle_plan_fill_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞¬ª ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç.
    """
    q = update.callback_query
    await q.answer()
    await q.edit_message_text(
        "üìÑ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É* –¥–ª—è –ø–ª–∞–Ω–∞:",
        parse_mode="Markdown"
    )
    return STATE_PLAN_SPECIFIC


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Å –ø–æ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
async def show_plan_card(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã
    if update.callback_query:
        q = update.callback_query
        await q.answer()
        send = q.edit_message_text
    else:
        send = update.message.reply_text

    pending = context.user_data.setdefault("pending_plan", {})
    text = "üìã *–ù–æ–≤—ã–π –ø–ª–∞–Ω:*\n"
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π: (–ò–º—è, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, callback-action)
    fields = [
        ("–î–∞—Ç–∞",           pending.get("–î–∞—Ç–∞")          or "‚Äî", "fill_date"),
        ("–°—É–º–º–∞",          pending.get("–°—É–º–º–∞")         or "‚Äî", "fill_amount"),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  pending.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è") or "‚Äî", "fill_classification"),
        ("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     pending.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞")    or "‚Äî", "fill_specific"),
    ]
    emojis = {"–î–∞—Ç–∞":"üìÖ","–°—É–º–º–∞":"üí∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":"üè∑Ô∏è","–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":"üìÑ"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    for name, val, _ in fields:
        text += f"{emojis[name]} *{name}:* {val}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = []
    for name, _, action in fields:
        label = f"{emojis[name]} {name}"
        kb.append([InlineKeyboardButton(label, callback_data=f"plans:{action}")])

    # –ö–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
    btns = [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="plans:cancel")]
    if pending.get("–î–∞—Ç–∞") and pending.get("–°—É–º–º–∞") and pending.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"):
        btns.append(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="plans:save"))
    kb.append(btns)

    await send(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))
    return STATE_PLAN_ADD


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–û—Ç–º–µ–Ω–∏—Ç—å¬ª (–Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–ª–∞–Ω–æ–≤)
async def handle_plan_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    from handlers.menu import show_main_menu
    return await show_main_menu(update, context)


async def start_plans(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ 1: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–ª–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    """
    q = update.callback_query
    await q.answer()

    url = context.user_data.get("sheet_url")
    if not url:
        return await q.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç ¬´–ü–ª–∞–Ω—ã¬ª
    _, ws_plans = open_finance_and_plans(url)
    rows = ws_plans.get_all_values()[1:]

    today = date.today()
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É/–≥–æ–¥—É
    plans = []
    for r in rows:
        dt = parse_sheet_date(r[4])
        if dt and dt.year == today.year and dt.month == today.month:
            plans.append({
                "–°—É–º–º–∞":         r[5],
                "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": r[7] or "‚Äî",
                "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":    r[8] or "‚Äî"
            })

    if not plans:
        body = "‚Äî –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü ‚Äî"
    else:
        body = "\n".join(
            f"{i+1}. {p['–°—É–º–º–∞']} ‚Äî {p['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']} ‚Äî {p['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞']}"
            for i, p in enumerate(plans)
        )

    text = f"üóì *–ü–ª–∞–Ω—ã –Ω–∞ {today.strftime('%B %Y').lower()}:*\n{body}"

    kb = [
        # –ö–Ω–æ–ø–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª –∑–∞–ø—É—Å–∫–∞–µ—Ç STATE_PLAN_ADD
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å",        callback_data="plans:add")],
        # –ö–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω—ã¬ª –∑–∞–ø—É—Å–∫–∞–µ—Ç STATE_PLAN_COPY
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω—ã", callback_data="plans:copy")],
        # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å plans:cancel, –∞ –Ω–µ plans:back
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",           callback_data="plans:cancel")],
    ]
    await q.edit_message_text(text, parse_mode="Markdown",
                              reply_markup=InlineKeyboardMarkup(kb))
    return STATE_PLAN_MENU

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
async def handle_plan_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ 2: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å¬ª.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    init_pending_plan(context)
    return await show_plan_card(update, context)

# –î–∞—Ç–∞
async def handle_plan_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    q = update.callback_query
    await q.answer()
    _, iso = q.data.split("|", 1)
    dt = datetime.fromisoformat(iso).date()
    pending = context.user_data["pending_plan"]
    pending["–î–∞—Ç–∞"]  = f"{dt.day:02d}.{dt.month:02d}.{dt.year}"
    pending["–ì–æ–¥"]   = str(dt.year)
    pending["–ú–µ—Å—è—Ü"] = dt.strftime("%B")
    return await show_plan_card(update, context)

async def change_plan_calendar_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ < –∏ > –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–ª–∞–Ω–∞.
    """
    q = update.callback_query
    await q.answer()
    action, ym = q.data.split("|", 1)       # e.g. "prev_month|2025-07"
    y, m = map(int, ym.split("-"))
    from handlers.operations import create_calendar
    kb = create_calendar(y, m)
    await q.edit_message_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–ª–∞–Ω–∞:*",
        parse_mode="Markdown",
        reply_markup=kb
    )
    return STATE_PLAN_DATE


# –°—É–º–º–∞
async def handle_plan_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    text = update.message.text.strip()
    try:
        amt = float(text.replace(",", "."))
        if amt <= 0:
            raise ValueError
    except ValueError:
        return await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ* —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `5000`.",
            parse_mode="Markdown"
        )
    context.user_data["pending_plan"]["–°—É–º–º–∞"] = str(amt)
    return await show_plan_card(update, context)


# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
async def handle_plan_class_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    data = q.data.split("_", 2)[2]  # –ø–æ—Å–ª–µ "plans:class_"
    pending = context.user_data["pending_plan"]
    if data == "other":
        await q.edit_message_text("üìÑ –í–≤–µ–¥–∏—Ç–µ *–∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É* –¥–ª—è –Ω–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:", parse_mode="Markdown")
        return STATE_PLAN_SPECIFIC
    pending["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = data
    return await show_plan_card(update, context)

async def handle_plan_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É.
    """
    text = update.message.text.strip()
    context.user_data["pending_plan"]["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"] = text or "-"
    return await show_plan_card(update, context)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Google –∑–∞–ø–∏—Å–∏
async def handle_plan_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()

    url = context.user_data.get("sheet_url")
    _, ws_plans = open_finance_and_plans(url)

    row = context.user_data["pending_plan"]
    new_row = [
        row["–ì–æ–¥"], row["–ú–µ—Å—è—Ü"], row["–ë–∞–Ω–∫"],
        row["–û–ø–µ—Ä–∞—Ü–∏—è"], row["–î–∞—Ç–∞"], row["–°—É–º–º–∞"],
        "",  # –û—Å—Ç–∞—Ç–æ–∫ ‚Äî —Ñ–æ—Ä–º—É–ª–∞ –ª–∏—Å—Ç–∞
        row["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"], row["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]
    ]
    ws_plans.append_row(new_row, value_input_option="USER_ENTERED")

    await q.edit_message_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    return await start_plans(update, context)


async def handle_plan_copy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ 3: –∫–æ–ø–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π.
    """
    q = update.callback_query
    await q.answer()

    url = context.user_data.get("sheet_url")
    _, ws_plans = open_finance_and_plans(url)
    rows = ws_plans.get_all_values()[1:]

    today = date.today()
    pm = today.month - 1 or 12
    py = today.year if today.month > 1 else today.year - 1
    last_day = calendar.monthrange(today.year, today.month)[1]
    new_date = f"{last_day:02d}.{today.month:02d}.{today.year}"

    to_copy = []
    for r in rows:
        dt = parse_sheet_date(r[4])
        if dt and dt.year == py and dt.month == pm:
            new_row = [
                r[0],  # –ì–æ–¥
                r[1],  # –ú–µ—Å—è—Ü
                r[2],  # –ë–∞–Ω–∫
                r[3],  # –û–ø–µ—Ä–∞—Ü–∏—è ("–ü–ª–∞–Ω")
                new_date,
                r[5],  # –°—É–º–º–∞
                "",    # –û—Å—Ç–∞—Ç–æ–∫ (—Ñ–æ—Ä–º—É–ª–∞ –Ω–∞ –ª–∏—Å—Ç–µ)
                r[7],  # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
                r[8],  # –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
            ]
            to_copy.append(new_row)

    if to_copy:
        ws_plans.append_rows(to_copy, value_input_option="USER_ENTERED")
        await q.edit_message_text("üîÑ –ü–ª–∞–Ω—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
    else:
        await q.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–æ—à–ª—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")

    return await start_plans(update, context)


async def handle_plan_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –®–∞–≥ 4: –∫–Ω–æ–ø–∫–∞ ¬´üîô –ù–∞–∑–∞–¥¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    q = update.callback_query
    await q.answer()
    from handlers.menu import show_main_menu
    return await show_main_menu(update, context)


from telegram.ext import ConversationHandler

from telegram.ext import ConversationHandler

def register_plans_handlers(app):
    conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_plans, pattern=r"^menu:plans$")
        ],
        states={
            STATE_PLAN_MENU: [
                # ‚ûï –î–æ–±–∞–≤–∏—Ç—å
                CallbackQueryHandler(handle_plan_add,     pattern=r"^plans:add$"),
                # üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞–Ω—ã
                CallbackQueryHandler(handle_plan_copy,    pattern=r"^plans:copy$"),
                # üîô –ù–∞–∑–∞–¥ ‚Äî —Ç–µ–ø–µ—Ä—å plans:cancel
                CallbackQueryHandler(handle_plan_cancel,  pattern=r"^plans:cancel$"),
                # —Ä–µ–∑–µ—Ä–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π plans:back
                CallbackQueryHandler(handle_plan_cancel,  pattern=r"^plans:back$")
            ],
            STATE_PLAN_ADD: [
                CallbackQueryHandler(handle_plan_fill_date,           pattern=r"^plans:fill_date$"),
                CallbackQueryHandler(handle_plan_fill_amount,         pattern=r"^plans:fill_amount$"),
                CallbackQueryHandler(handle_plan_fill_classification, pattern=r"^plans:fill_classification$"),
                CallbackQueryHandler(handle_plan_fill_specific,       pattern=r"^plans:fill_specific$"),
                CallbackQueryHandler(handle_plan_save,                pattern=r"^plans:save$"),
                CallbackQueryHandler(handle_plan_cancel,              pattern=r"^plans:cancel$")
            ],
            STATE_PLAN_DATE: [
                CallbackQueryHandler(change_plan_calendar_month,pattern=r"^(prev_month|next_month)\|\d{4}-\d{2}$"),
                CallbackQueryHandler(handle_plan_date, pattern=r"^select_date\|\d{4}-\d{2}-\d{2}$")
            ],
            STATE_PLAN_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_plan_amount)
            ],
            STATE_PLAN_CLASSIFICATION: [
                CallbackQueryHandler(handle_plan_class_choice, pattern=r"^plans:class_.+$")
            ],
            STATE_PLAN_SPECIFIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_plan_specific)
            ],
        },
        fallbacks=[
            CallbackQueryHandler(handle_plan_cancel, pattern=r"^plans:cancel$")
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
