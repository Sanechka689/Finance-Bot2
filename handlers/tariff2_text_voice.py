# handlers/tariff2_text_voice.py
# ======================================================
# –≠—Ç–∞–ø 4: –¢–∞—Ä–∏—Ñ 2 (—Ç–µ–∫—Å—Ç + –≥–æ–ª–æ—Å) ‚Üí –ò–ò ‚Üí JSON ‚Üí –∫–∞—Ä—Ç–æ—á–∫–∞ ‚Üí –∑–∞–ø–∏—Å—å –≤ Google Sheets
# ======================================================

import os
import io
import json
import re
from datetime import datetime
from typing import Optional, Dict, Any, List
from utils.caps import has_cap


from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, MessageHandler, CallbackQueryHandler, filters

# –ê—É–¥–∏–æ
from pydub import AudioSegment
import speech_recognition as sr

# –ò–ò (OpenAI SDK 1.x)
try:
    from openai import OpenAI
except ImportError:
    OpenAI = None

from services.sheets_service import open_finance_and_plans

# -----------------------------
# 0) –£–¢–ò–õ–ò–¢–´: —Ñ–æ—Ä–º–∞—Ç, —ç–º–æ–¥–∑–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—è
# -----------------------------

EMOJI = {
    "–î–∞—Ç–∞": "üìÖ",
    "–ë–∞–Ω–∫": "üè¶",
    "–û–ø–µ—Ä–∞—Ü–∏—è": "‚öôÔ∏è",
    "–°—É–º–º–∞": "üí∏",
    "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": "üè∑Ô∏è",
    "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞": "üîç",
}

RU_MONTHS = [
    "–Ø–Ω–≤–∞—Ä—å","–§–µ–≤—Ä–∞–ª—å","–ú–∞—Ä—Ç","–ê–ø—Ä–µ–ª—å","–ú–∞–π","–ò—é–Ω—å",
    "–ò—é–ª—å","–ê–≤–≥—É—Å—Ç","–°–µ–Ω—Ç—è–±—Ä—å","–û–∫—Ç—è–±—Ä—å","–ù–æ—è–±—Ä—å","–î–µ–∫–∞–±—Ä—å"
]

VALID_OPERATIONS = {"–¢—Ä–∞—Ç–∞","–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ","–ü–µ—Ä–µ–≤–æ–¥","–ü–ª–∞–Ω"}



def _ensure_date_iso(s: str) -> str:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO –∏–ª–∏ DD.MM.YYYY ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º –∫ ISO YYYY-MM-DD.
    """
    s = s.strip()
    # ISO?
    try:
        return datetime.fromisoformat(s).date().isoformat()
    except Exception:
        pass
    # DD.MM.YYYY
    m = re.match(r"^(\d{1,2})\.(\d{1,2})\.(\d{4})$", s)
    if m:
        d, mo, y = map(int, m.groups())
        return datetime(year=y, month=mo, day=d).date().isoformat()
    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Üí —Å–µ–≥–æ–¥–Ω—è
    return datetime.now().date().isoformat()

def _normalize_op(op: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É.
    –ï—Å–ª–∏ —ç—Ç–æ "–ü–µ—Ä–µ–≤–æ–¥" –∏ –ø—Ä–∏—à–ª–∞ –µ–¥–∏–Ω–∏—á–Ω–∞—è –∑–∞–ø–∏—Å—å ‚Äî –ù–ò–ñ–ï –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–≤–µ.
    –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º [op].
    """
    # –ü–æ–ª—è –∏ –¥–µ—Ñ–æ–ª—Ç—ã:
    op = {k: op.get(k) for k in ["–ì–æ–¥","–ú–µ—Å—è—Ü","–ë–∞–Ω–∫","–û–ø–µ—Ä–∞—Ü–∏—è","–î–∞—Ç–∞","–°—É–º–º–∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è","–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]}

    # –î–∞—Ç–∞ ‚Üí ISO
    op["–î–∞—Ç–∞"] = _ensure_date_iso(op.get("–î–∞—Ç–∞") or datetime.now().date().isoformat())
    dt = datetime.fromisoformat(op["–î–∞—Ç–∞"])
    op["–ì–æ–¥"] = op.get("–ì–æ–¥") or dt.year
    op["–ú–µ—Å—è—Ü"] = op.get("–ú–µ—Å—è—Ü") or RU_MONTHS[dt.month-1]

    # –û–ø–µ—Ä–∞—Ü–∏—è
    if op.get("–û–ø–µ—Ä–∞—Ü–∏—è") not in VALID_OPERATIONS:
        op["–û–ø–µ—Ä–∞—Ü–∏—è"] = "–¢—Ä–∞—Ç–∞"

    # –°—É–º–º–∞
    try:
        amount = float(str(op.get("–°—É–º–º–∞","0")).replace(",", "."))
    except Exception:
        amount = 0.0

    if op["–û–ø–µ—Ä–∞—Ü–∏—è"] == "–¢—Ä–∞—Ç–∞":
        amount = -abs(amount)
    elif op["–û–ø–µ—Ä–∞—Ü–∏—è"] == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
        amount = abs(amount)
    # "–ü–ª–∞–Ω" –º–æ–∂–µ—Ç –±—ã—Ç—å + –∏–ª–∏ - (–∫–∞–∫ –∑–∞–¥—É–º–∞–Ω–æ), –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
    op["–°—É–º–º–∞"] = round(amount, 2)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ (–æ–±—ã—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
    return [op]

def _transfer_to_two_rows(op: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç "–ü–µ—Ä–µ–≤–æ–¥" –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:
    1) –°—Ç—Ä–æ–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è: –ë–∞–Ω–∫=–æ—Ç–∫—É–¥–∞, –°—É–º–º–∞= -X, –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞=–∫—É–¥–∞
    2) –°—Ç—Ä–æ–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: –ë–∞–Ω–∫=–∫—É–¥–∞, –°—É–º–º–∞= +X, –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞=–æ—Ç–∫—É–¥–∞
    –¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è: –ë–∞–Ω–∫ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å, –ë–∞–Ω–∫ –ü–æ–ª—É—á–∞—Ç–µ–ª—å, –°—É–º–º–∞, –î–∞—Ç–∞.
    –ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –Ω–µ—Ç ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ—Ä–Ω—É—Ç—å –∏–∑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏.
    """
    date_iso = _ensure_date_iso(op.get("–î–∞—Ç–∞") or datetime.now().date().isoformat())
    dt = datetime.fromisoformat(date_iso)

    # –ü–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç–∞—Ç—å –±–∞–Ω–∫–∏:
    bank_from = op.get("–ë–∞–Ω–∫ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å") or ""
    bank_to   = op.get("–ë–∞–Ω–∫ –ü–æ–ª—É—á–∞—Ç–µ–ª—å") or ""
    # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —á–µ—Ä–µ–∑ "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: –ë–∞–Ω–∫ –•–•–• ‚Üí –ë–∞–Ω–∫ YYY"
    if not bank_from or not bank_to:
        hint = (op.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "").lower()
        # —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞; –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å —è–≤–Ω—ã–µ –ø–æ–ª—è
        # –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
        _ = hint

    try:
        base_amt = abs(float(str(op.get("–°—É–º–º–∞","0")).replace(",", ".")))
    except Exception:
        base_amt = 0.0

    row1 = {
        "–ì–æ–¥": dt.year, "–ú–µ—Å—è—Ü": RU_MONTHS[dt.month-1],
        "–ë–∞–Ω–∫": bank_from, "–û–ø–µ—Ä–∞—Ü–∏—è": "–ü–µ—Ä–µ–≤–æ–¥",
        "–î–∞—Ç–∞": date_iso, "–°—É–º–º–∞": -round(base_amt, 2),
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": "–ü–µ—Ä–µ–≤–æ–¥", "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞": bank_to or "‚Äî"
    }
    row2 = {
        "–ì–æ–¥": dt.year, "–ú–µ—Å—è—Ü": RU_MONTHS[dt.month-1],
        "–ë–∞–Ω–∫": bank_to, "–û–ø–µ—Ä–∞—Ü–∏—è": "–ü–µ—Ä–µ–≤–æ–¥",
        "–î–∞—Ç–∞": date_iso, "–°—É–º–º–∞": round(base_amt, 2),
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": "–ü–µ—Ä–µ–≤–æ–¥", "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞": bank_from or "‚Äî"
    }
    return [row1, row2]

def format_card(op: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏.
    """
    def line(k, v):
        em = EMOJI.get(k, "‚Ä¢")
        return f"{em} {k}: {v if v not in [None,''] else '‚Äî'}"

    # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π "–ü–µ—Ä–µ–≤–æ–¥" ‚Äî –æ–∂–∏–¥–∞—Ç—å, —á—Ç–æ –µ—Å—Ç—å –ë–∞–Ω–∫ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å/–ü–æ–ª—É—á–∞—Ç–µ–ª—å
    if op.get("–û–ø–µ—Ä–∞—Ü–∏—è") == "–ü–µ—Ä–µ–≤–æ–¥":
        rows = [
            line("–î–∞—Ç–∞", _ensure_date_iso(op.get("–î–∞—Ç–∞",""))),
            f"{EMOJI['–ë–∞–Ω–∫']} –ë–∞–Ω–∫ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {op.get('–ë–∞–Ω–∫ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å','‚Äî')}",
            f"{EMOJI['–ë–∞–Ω–∫']} –ë–∞–Ω–∫ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {op.get('–ë–∞–Ω–∫ –ü–æ–ª—É—á–∞—Ç–µ–ª—å','‚Äî')}",
            line("–°—É–º–º–∞", op.get("–°—É–º–º–∞","‚Äî")),
        ]
        return "üîÅ –ü–µ—Ä–µ–≤–æ–¥\n" + "\n".join(rows)

    # –û–±—ã—á–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    rows = [
        line("–î–∞—Ç–∞", _ensure_date_iso(op.get("–î–∞—Ç–∞",""))),
        line("–ë–∞–Ω–∫", op.get("–ë–∞–Ω–∫","")),
        line("–û–ø–µ—Ä–∞—Ü–∏—è", op.get("–û–ø–µ—Ä–∞—Ü–∏—è","")),
        line("–°—É–º–º–∞", op.get("–°—É–º–º–∞","")),
        line("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", op.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è","")),
        line("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞", op.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞","")),
    ]
    return "üßæ –û–ø–µ—Ä–∞—Ü–∏—è\n" + "\n".join(rows)

# -----------------------------
# 1) GPT: –ø—Ä–æ–º—Ç –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON
# -----------------------------

SYSTEM_PROMPT = (
    "–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON, "
    "—Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º: –ì–æ–¥, –ú–µ—Å—è—Ü, –ë–∞–Ω–∫, –û–ø–µ—Ä–∞—Ü–∏—è, –î–∞—Ç–∞, –°—É–º–º–∞, –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞. "
    "–û–ø–µ—Ä–∞—Ü–∏—è ‚àà {–¢—Ä–∞—Ç–∞, –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –ü–µ—Ä–µ–≤–æ–¥, –ü–ª–∞–Ω}. "
    "–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –ü–µ—Ä–µ–≤–æ–¥, –≤–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Å—Ç—Ä–æ–∫): –ø–µ—Ä–≤–∞—è ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å, "
    "–≤—Ç–æ—Ä–∞—è ‚Äî –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–µ–∑ –º–∏–Ω—É—Å–∞; –≤ –∫–∞–∂–¥–æ–π —É–∫–∞–∂–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ë–∞–Ω–∫ –∏ –≤ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ ‚Äî –≤—Å—Ç—Ä–µ—á–Ω—ã–π –ë–∞–Ω–∫. "
    "–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî —Å–µ–≥–æ–¥–Ω—è). "
    "–ú–µ—Å—è—Ü ‚Äî —Ä—É—Å—Å–∫–∏–º —Å–ª–æ–≤–æ–º (–Ø–Ω–≤–∞—Ä—å..–î–µ–∫–∞–±—Ä—å), —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π —Å –¥–∞—Ç–æ–π. "
    "–ß–ò–°–õ–û–í–´–ï –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—É–º–º—ã, –±–µ–∑ –≤–∞–ª—é—Ç—ã. "
    "–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ —Ç–µ–∫—Å—Ç–∞ –≤–Ω–µ JSON."
)

async def gpt_to_json(user_text: str) -> Any:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π JSON (dict –∏–ª–∏ list).
    """
    if OpenAI is None:
        raise RuntimeError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–∞–∫–µ—Ç `openai`.")

    client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.1,
        messages=[
            {"role":"system","content":SYSTEM_PROMPT},
            {"role":"user","content":user_text}
        ],
        response_format={"type":"json_object"}  # –ø—Ä–æ—Å–∏–º —Ä–æ–≤–Ω–æ JSON-–æ–±—ä–µ–∫—Ç; –¥–ª—è –ü–µ—Ä–µ–≤–æ–¥–∞ –Ω–∏–∂–µ –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
    )
    content = resp.choices[0].message.content.strip()

    # –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–∞—Å—Å–∏–≤
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç, –∑–∞—Ç–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
    try:
        data = json.loads(content)
    except Exception:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π JSON –æ—Ç { ... } –∏–ª–∏ [ ... ]
        start_obj = content.find("{")
        start_arr = content.find("[")
        start = min([x for x in [start_obj, start_arr] if x != -1], default=0)
        end = max(content.rfind("}"), content.rfind("]"))
        data = json.loads(content[start:end+1])

    return data

def normalize_result(data: Any) -> List[Dict[str, Any]]:
    """
    –ü—Ä–∏–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç GPT –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π (1 –∏–ª–∏ 2).
    """
    ops: List[Dict[str,Any]] = []

    if isinstance(data, list):
        # –ù–∞–ø—Ä–∏–º–µ—Ä, "–ü–µ—Ä–µ–≤–æ–¥" —É–∂–µ –ø—Ä–∏—à—ë–ª –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏
        for item in data:
            # –û–±—ã—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ –∑–Ω–∞–∫–∞)
            if item.get("–û–ø–µ—Ä–∞—Ü–∏—è") == "–ü–µ—Ä–µ–≤–æ–¥":
                # –ï—Å–ª–∏ GPT —É–∂–µ –ø—Ä–∏—Å–ª–∞–ª 2 —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É/–º–µ—Å—è—Ü –ø—Ä–æ–≤–µ—Ä–∏–º
                for it in [item]:
                    it["–î–∞—Ç–∞"] = _ensure_date_iso(it.get("–î–∞—Ç–∞",""))
                    dt = datetime.fromisoformat(it["–î–∞—Ç–∞"])
                    it["–ì–æ–¥"] = it.get("–ì–æ–¥") or dt.year
                    it["–ú–µ—Å—è—Ü"] = it.get("–ú–µ—Å—è—Ü") or RU_MONTHS[dt.month-1]
                    ops.append(it)
            else:
                ops.extend(_normalize_op(item))
    elif isinstance(data, dict):
        if data.get("–û–ø–µ—Ä–∞—Ü–∏—è") == "–ü–µ—Ä–µ–≤–æ–¥":
            ops = _transfer_to_two_rows(data)
        else:
            ops = _normalize_op(data)
    else:
        # –ù–µ–≤–∞–ª–∏–¥–Ω–æ ‚Üí –ø—É—Å—Ç–æ
        ops = []

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —á–∏—Å—Ç–∫–∞: –æ–≥—Ä–∞–Ω–∏—á–∏–º —Å—Ç—Ä–æ–∫–∏
    for op in ops:
        op["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = (op.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è") or "")[:64]
        op["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]     = (op.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "")[:128]

    return ops

# -----------------------------
# 2) –•–ï–ù–î–õ–ï–†–´: —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å
# -----------------------------

# 2.1 –¢–µ–∫—Å—Ç ‚Üí GPT ‚Üí –∫–∞—Ä—Ç–æ—á–∫–∞
async def tariff2_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–∞–ø 4.1: –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ç–∞—Ä–∏—Ñ—É (–¥–æ–±–∞–≤—å —Å–≤–æ—é –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î –∑–¥–µ—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    # if not user_has_tariff2(update.effective_user.id): ...

    # –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥, –µ—Å–ª–∏ –∂–¥—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
    if context.user_data.get("awaiting_sheet_url"):
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
    if not has_cap(context, "text"):
        return await update.message.reply_text(
            "‚úã –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö 2 –∏ 3. "
            "–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ /start ‚Üí ¬´–ü–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ¬ª."
        )

    txt = (update.message.text or "").strip()
    if not txt:
        return

    await update.message.reply_chat_action("typing")
    try:
        data = await gpt_to_json(txt)
        ops = normalize_result(data)
        if not ops:
            return await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∏–Ω–∞—á–µ.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data["t2_ops_pending"] = ops

        # –ü–æ–∫–∞–∂–µ–º –∫–∞—Ä—Ç–æ—á–∫—É(–∏). –ï—Å–ª–∏ –æ–¥–Ω–∞ ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞; –µ—Å–ª–∏ –¥–≤–µ (–ø–µ—Ä–µ–≤–æ–¥) ‚Äî –ø–æ–∫–∞–∂–µ–º –æ–±–µ.
        cards = []
        for op in ops:
            cards.append(format_card(op))
        text_card = "\n\n".join(cards)

        kb = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="t2_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="t2_cancel")],
        ]
        await update.message.reply_text(text_card, reply_markup=InlineKeyboardMarkup(kb))

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# 2.2 –ì–æ–ª–æ—Å ‚Üí STT ‚Üí GPT ‚Üí –∫–∞—Ä—Ç–æ—á–∫–∞
async def tariff2_voice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–∞–ø 4.2: –≥–æ–ª–æ—Å ‚Üí —Ç–µ–∫—Å—Ç

    if context.user_data.get("awaiting_sheet_url"):
        return
    if not has_cap(context, "voice"):
        return await update.message.reply_text(
            "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–∞—Ä–∏—Ñ–∞—Ö 2 –∏ 3. "
            "–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ ‚Äî /start ‚Üí ¬´–ü–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ¬ª."
        )

    voice = update.message.voice
    if not voice:
        return
    await update.message.reply_chat_action("record_voice")
    f = await voice.get_file()
    b = await f.download_as_bytearray()

    # ogg ‚Üí wav (–Ω—É–∂–µ–Ω ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ)
    audio = AudioSegment.from_file(io.BytesIO(b), format="ogg")
    wav_io = io.BytesIO()
    audio.export(wav_io, format="wav")
    wav_io.seek(0)

    # SpeechRecognition
    r = sr.Recognizer()
    with sr.AudioFile(wav_io) as source:
        audio_data = r.record(source)
    try:
        text_ru = r.recognize_google(audio_data, language="ru-RU")
    except Exception:
        return await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

    # –î–∞–ª—å—à–µ ‚Äî –∫–∞–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
    await update.message.reply_chat_action("typing")
    try:
        data = await gpt_to_json(text_ru)
        ops = normalize_result(data)
        if not ops:
            return await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Ä–µ—á–∏.")

        context.user_data["t2_ops_pending"] = ops
        cards = [format_card(op) for op in ops]
        kb = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="t2_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="t2_cancel")],
        ]
        await update.message.reply_text("\n\n".join(cards), reply_markup=InlineKeyboardMarkup(kb))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

# 2.3 –§–æ—Ç–æ ‚Üí (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –¢–∞—Ä–∏—Ñ 3)
async def tariff3_photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_sheet_url"):
        return
    if not has_cap(context, "photo"):
        return await update.message.reply_text(
            "üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¢–∞—Ä–∏—Ñ–µ 3.\n"
            "–°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ ‚Äî /start ‚Üí ¬´–ü–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ¬ª."
        )
    # –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/QR/—Å–∫—Ä–∏–Ω–æ–≤
    return await update.message.reply_text(
        "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –ø–∞—Ç—á–∞."
    )

# -----------------------------
# 3) –ö–û–õ–õ–ë–≠–ö–ò: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å / –æ—Ç–º–µ–Ω–∏—Ç—å
# -----------------------------

async def t2_confirm_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    ops: List[Dict[str, Any]] = context.user_data.get("t2_ops_pending") or []
    if not ops:
        return await q.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏.")

    # –≠—Ç–∞–ø 4.3: –µ—Å–ª–∏ —É –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–π –ë–∞–Ω–∫ ‚Üí —Å–ø—Ä–æ—Å–∏—Ç—å –±–∞–Ω–∫ (–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–π —Å—é–¥–∞ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞)
    # –ï—Å–ª–∏ —Ö–æ—á–µ—à—å: –µ—Å–ª–∏ —É –∫–∞–∫–æ–π-–ª–∏–±–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –±–∞–Ω–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º ask_bank_show(...) –∏ return.
    if any(not (op.get("–ë–∞–Ω–∫") or "").strip() and op.get("–û–ø–µ—Ä–∞—Ü–∏—è") != "–ü–µ—Ä–µ–≤–æ–¥" for op in ops):
        # >>> –í–°–¢–ê–í–¨ —Å—é–¥–∞ —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –∏ –≤–µ—Ä–Ω–∏—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ <<<
        # await ask_bank_show(update, context, current_value="")
        return await q.edit_message_text("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –±–∞–Ω–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ–±–∞–≤—å –≤—ã–∑–æ–≤ —Å–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞ –±–∞–Ω–∫–∞ –∑–¥–µ—Å—å).")

    # –ü–æ–ª—É—á–∞–µ–º URL —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≥–¥–µ-—Ç–æ —Ç—ã —ç—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å –ø—Ä–∏ –≠—Ç–∞–ø–µ 2)
    sheet_url = context.user_data.get("sheet_url")
    if not sheet_url:
        return await q.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É (–≠—Ç–∞–ø 2).")

    ws_fin, _ = open_finance_and_plans(sheet_url)

    # –≠—Ç–∞–ø 4.4: –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ (—É—á–∏—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π ¬´–ü–µ—Ä–µ–≤–æ–¥¬ª ‚Äî —É –Ω–∞—Å ops —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 2)
    for op in ops:
        row = [
            op.get("–ì–æ–¥"), op.get("–ú–µ—Å—è—Ü"), op.get("–ë–∞–Ω–∫"),
            op.get("–û–ø–µ—Ä–∞—Ü–∏—è"), op.get("–î–∞—Ç–∞"), op.get("–°—É–º–º–∞"),
            op.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"), op.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞")
        ]
        ws_fin.append_row(row, value_input_option="USER_ENTERED")

    context.user_data.pop("t2_ops_pending", None)
    await q.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(ops)}")

async def t2_cancel_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    context.user_data.pop("t2_ops_pending", None)
    await q.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")

# -----------------------------
# 4) –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# -----------------------------

def register_tariff2_handlers(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¢–∞—Ä–∏—Ñ–∞ 2: —Ç–µ–∫—Å—Ç –∏ –≥–æ–ª–æ—Å + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, tariff2_text_handler))
    # –ì–æ–ª–æ—Å–æ–≤—ã–µ
    app.add_handler(MessageHandler(filters.VOICE, tariff2_voice_handler))
    # –ö–æ–ª–ª–±—ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(t2_confirm_cb, pattern=r"^t2_confirm$"))
    app.add_handler(CallbackQueryHandler(t2_cancel_cb,  pattern=r"^t2_cancel$"))
        # –§–æ—Ç–æ (–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è-–¥–æ–∫—É–º–µ–Ω—Ç—ã)
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, tariff3_photo_handler))

