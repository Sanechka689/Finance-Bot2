# handlers/operations.py
# –≠—Ç–∞–ø 4: —Ä—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)

from datetime import datetime
import calendar
import pytz

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from utils.constants import (
    STATE_OP_MENU,
    STATE_OP_FIELD_CHOOSE,
    STATE_OP_FIELD_INPUT,
    STATE_SELECT_DATE,
    STATE_SELECT_BANK,
    STATE_SELECT_OPERATION,
    STATE_ENTER_AMOUNT,
    STATE_ENTER_CLASSIFICATION,
    STATE_ENTER_SPECIFIC,
    STATE_CONFIRM,
)
from utils.state import init_user_state
from services.sheets_service import open_finance_and_plans

# 4.1 ‚Äî —Å—Ç–∞—Ä—Ç /add
async def start_op(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    tariff = context.user_data.get("tariff", "tariff_free")
    if tariff != "tariff_free":
        return await update.message.reply_text(
            "‚ö†Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ."
        )
    init_user_state(context)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="op_start_add"),
        InlineKeyboardButton("üìã –ú–µ–Ω—é",     callback_data="op_start_menu"),
    ]])
    await update.message.reply_text(
        "‚úèÔ∏è –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=kb
    )
    return STATE_OP_MENU

# 4.2 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª / ¬´–ú–µ–Ω—é¬ª
async def on_op_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    if q.data == "op_start_add":
        # –†–∞–Ω–µ–µ –±—ã–ª–æ: show_fields_menu(q,...)
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å Update
        return await show_fields_menu(update, context)
    else:
        await q.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return ConversationHandler.END

# 4.3 ‚Äî –º–µ–Ω—é –ø–æ–ª–µ–π
async def show_fields_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞",       callback_data="field|–î–∞—Ç–∞"),
         InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",       callback_data="field|–ë–∞–Ω–∫")],
        [InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",   callback_data="field|–û–ø–µ—Ä–∞—Ü–∏—è"),
         InlineKeyboardButton("‚ûñ –°—É–º–º–∞",      callback_data="field|–°—É–º–º–∞")],
        [InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="field|–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
         InlineKeyboardButton("üîç –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="field|–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",      callback_data="op_start_add")],
    ]
    op = context.user_data["pending_op"]
    text = "\n".join(f"{k}: {v if v is not None else '‚Äî'}" for k,v in op.items())

    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update_or_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return STATE_OP_FIELD_CHOOSE

# ‚Äî 4.4 –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø–æ–ª–µ
async def choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    field = q.data.split("|", 1)[1]
    context.user_data["current_field"] = field

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–≥
    if field == "–î–∞—Ç–∞":
        return await ask_date(update, context)
    if field == "–ë–∞–Ω–∫":
        return await ask_bank(update, context)
    if field == "–û–ø–µ—Ä–∞—Ü–∏—è":
        return await ask_operation(update, context)
    if field == "–°—É–º–º–∞":
        return await ask_amount(update, context)
    if field == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":
        await q.edit_message_text("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é:")
        return STATE_ENTER_CLASSIFICATION
    if field == "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":
        await q.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É:")
        return STATE_ENTER_SPECIFIC

# ‚Äî 4.5 –î–∞—Ç–∞: –∫–∞–ª–µ–Ω–¥–∞—Ä—å
# (–ø–æ–≤—Ç–æ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é create_calendar –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
def get_prev_year_month(year: int, month: int):
    return (year-1, 12) if month==1 else (year, month-1)
def get_next_year_month(year: int, month: int):
    return (year+1, 1) if month==12 else (year, month+1)

def create_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    today = datetime.now(pytz.timezone("Europe/Moscow")).date()
    markup = []
    py, pm = get_prev_year_month(year, month)
    ny, nm = get_next_year_month(year, month)
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    markup.append([
        InlineKeyboardButton("<", callback_data=f"calendar|{py}|{pm}"),
        InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton(">", callback_data=f"calendar|{ny}|{nm}")
    ])
    # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    markup.append([InlineKeyboardButton(d, callback_data="ignore") for d in ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]])
    # —á–∏—Å–ª–∞
    for week in calendar.monthcalendar(year, month):
        row = []
        for day in week:
            if day==0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                ds = f"{year}-{month:02d}-{day:02d}"
                label = f"üî¥{day}" if (year,month,day)==(today.year,today.month,today.day) else str(day)
                row.append(InlineKeyboardButton(label, callback_data=f"select_date|{ds}"))
        markup.append(row)
    return InlineKeyboardMarkup(markup)

async def ask_date(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    cal = create_calendar(now.year, now.month)
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)
    else:
        await update_or_query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)
    return STATE_SELECT_DATE

async def handle_calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    data = q.data
    if data.startswith("calendar|"):
        _, y, m = data.split("|")
        cal = create_calendar(int(y), int(m))
        await q.edit_message_reply_markup(cal)
        return STATE_SELECT_DATE
    if data.startswith("select_date|"):
        _, ds = data.split("|")
        context.user_data["pending_op"]["–î–∞—Ç–∞"] = ds
        return await show_fields_menu(update, context)

# ‚Äî 4.6 –ë–∞–Ω–∫: –∫–Ω–æ–ø–∫–∏ –∏–∑ Google Sheets
async def ask_bank(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    banks = sorted(set(ws.col_values(3)[1:]))
    context.user_data["banks"] = banks
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(b, callback_data=f"select_bank|{b}")] for b in banks] + [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="op_start_add")]])
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    else:
        await update_or_query.message.reply_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    return STATE_SELECT_BANK

async def handle_bank_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    context.user_data["pending_op"]["–ë–∞–Ω–∫"] = q.data.split("|",1)[1]
    return await show_fields_menu(update, context)

# ‚Äî 4.7 –û–ø–µ—Ä–∞—Ü–∏—è: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
async def ask_operation(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="select_op|–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        InlineKeyboardButton("–¢—Ä–∞—Ç–∞",      callback_data="select_op|–¢—Ä–∞—Ç–∞"),
        InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥",    callback_data="select_op|–ü–µ—Ä–µ–≤–æ–¥"),
    ], [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="op_start_add")]])
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)
    else:
        await update_or_query.message.reply_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)
    return STATE_SELECT_OPERATION

async def handle_operation_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    context.user_data["pending_op"]["–û–ø–µ—Ä–∞—Ü–∏—è"] = q.data.split("|",1)[1]
    return await show_fields_menu(update, context)

# ‚Äî 4.8 –°—É–º–º–∞: –≤–≤–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
async def ask_amount(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="op_start_add")]])
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("‚ûñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—á–∏—Å–ª–æ):", reply_markup=kb)
    else:
        await update_or_query.message.reply_text("‚ûñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—á–∏—Å–ª–æ):", reply_markup=kb)
    return STATE_ENTER_AMOUNT

async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().replace(",",".")
    try:
        amt = float(text)
    except ValueError:
        return await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    op = context.user_data["pending_op"]["–û–ø–µ—Ä–∞—Ü–∏—è"]
    if op=="–¢—Ä–∞—Ç–∞" and amt>=0:
        return await update.message.reply_text("‚ö†Ô∏è –î–ª—è —Ç—Ä–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ >0!")
    if op=="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" and amt<0:
        return await update.message.reply_text("‚ö†Ô∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚â•0!")
    context.user_data["pending_op"]["–°—É–º–º–∞"] = amt
    return await show_fields_menu(update, context)

# ‚Äî 4.9 –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
async def input_classification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["pending_op"]["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = update.message.text.strip()
    return await show_fields_menu(update, context)

# ‚Äî 4.10 –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
async def input_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["pending_op"]["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"] = update.message.text.strip()
    return await show_fields_menu(update, context)

# ‚Äî 4.11 –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
async def show_confirm(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    op = context.user_data["pending_op"]
    if op.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") is None:
        op["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"] = "-"
    lines = [f"{k}: {v}" for k,v in op.items()]
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_op"),
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",    callback_data="op_start_add"),
    ]])
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n"+"\n".join(lines), reply_markup=kb)
    else:
        await update_or_query.message.reply_text("üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n"+"\n".join(lines), reply_markup=kb)
    return STATE_CONFIRM

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    op = context.user_data["pending_op"]
    dt = datetime.fromisoformat(op["–î–∞—Ç–∞"])
    year = dt.year
    month = dt.strftime("%B")
    # TODO: append_row –≤ Google Sheets
    await q.edit_message_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    return ConversationHandler.END

# ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —ç—Ç–∞–ø–∞ 4 ‚Äî
def register_operations_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("add", start_op)],
        states={
            STATE_OP_MENU: [
                CallbackQueryHandler(on_op_menu, pattern="^op_start_"),
            ],
            STATE_OP_FIELD_CHOOSE: [
                CallbackQueryHandler(choose_field, pattern="^field\\|"),
            ],
            STATE_SELECT_DATE: [
                CallbackQueryHandler(handle_calendar_callback, pattern="^(calendar\\||select_date\\|)"),
            ],
            STATE_SELECT_BANK: [
                CallbackQueryHandler(handle_bank_selection, pattern="^select_bank\\|"),
            ],
            STATE_SELECT_OPERATION: [
                CallbackQueryHandler(handle_operation_selection, pattern="^select_op\\|"),
            ],
            STATE_ENTER_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_input),
            ],
            STATE_ENTER_CLASSIFICATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_classification),
            ],
            STATE_ENTER_SPECIFIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_specific),
            ],
            STATE_CONFIRM: [
                CallbackQueryHandler(handle_confirm, pattern="^confirm_op$"),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u,c: ConversationHandler.END, pattern="^op_start_"),
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)