# handlers/operations.py
# –≠—Ç–∞–ø 4: —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from utils.constants import STATE_OP_FIELD_CHOOSE, STATE_OP_FIELD_INPUT
from utils.state import init_user_state

# 4.1 –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /add
async def start_op(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 4.1.1: —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    init_user_state(context)
    # 4.1.2: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ª–µ–π
    return await show_fields_menu(update, context)

# 4.2 –ú–µ–Ω—é –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
async def show_fields_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞",       callback_data="field|–î–∞—Ç–∞"),
            InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",       callback_data="field|–ë–∞–Ω–∫"),
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",   callback_data="field|–û–ø–µ—Ä–∞—Ü–∏—è"),
            InlineKeyboardButton("‚ûñ –°—É–º–º–∞",      callback_data="field|–°—É–º–º–∞"),
        ],
        [
            InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="field|–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
            InlineKeyboardButton("üîç –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="field|–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"),
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",      callback_data="cancel_op"),
        ],
    ]
    # 4.2.1 –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (–µ—â–µ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
    text = render_pending_op(context.user_data.get("pending_op", {}))

    # 4.2.2 –ï—Å–ª–∏ —ç—Ç–æ callback ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ
    if hasattr(update_or_query, "callback_query"):
        await update_or_query.callback_query.edit_message_text(
            text or "‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        await update_or_query.message.reply_text(
            text or "‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    # 4.2.3 –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data["state"] = STATE_OP_FIELD_CHOOSE
    return STATE_OP_FIELD_CHOOSE

# 4.3 –†–µ–Ω–¥–µ—Ä ¬´—á–µ—Ä–Ω–æ–≤–∏–∫–∞¬ª –æ–ø–µ—Ä–∞—Ü–∏–∏
def render_pending_op(op: dict) -> str:
    lines = []
    for k, v in op.items():
        lines.append(f"{k}: {v if v is not None else '‚Äî'}")
    return "\n".join(lines)

# 4.4 –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
async def choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    data = update.callback_query.data

    # 4.4.1 –ï—Å–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    if data == "cancel_op":
        await update.callback_query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # 4.4.2 –ò–Ω–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –±—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å
    _, field = data.split("|", 1)
    context.user_data["current_field"] = field

    # 4.4.3 –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    prompts = {
        "–î–∞—Ç–∞":          "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì",
        "–ë–∞–Ω–∫":          "üè¶ –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞",
        "–û–ø–µ—Ä–∞—Ü–∏—è":      "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –¢—Ä–∞—Ç–∞ –∏–ª–∏ –ü–µ—Ä–µ–≤–æ–¥",
        "–°—É–º–º–∞":         "‚ûñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥—É–∫—Ç—ã)",
        "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":    "üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É (–ø—Ä–∏–º–µ—Ä: –ü—è—Ç—ë—Ä–æ—á–∫–∞)",
    }
    await update.callback_query.edit_message_text(prompts[field])
    context.user_data["state"] = STATE_OP_FIELD_INPUT
    return STATE_OP_FIELD_INPUT

# 4.5 –°–±–æ—Ä –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
async def input_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    field = context.user_data.get("current_field")
    value = update.message.text.strip()
    # 4.5.1 –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫
    context.user_data["pending_op"][field] = value
    context.user_data["current_field"] = None
    # 4.5.2 –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –ø–æ–ª–µ–π
    return await show_fields_menu(update, context)

# 4.6 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
def register_operations_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("add", start_op)],
        states={
            STATE_OP_FIELD_CHOOSE: [
                CallbackQueryHandler(choose_field, pattern="^field\\|"),
            ],
            STATE_OP_FIELD_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_field),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern="cancel_op")
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
