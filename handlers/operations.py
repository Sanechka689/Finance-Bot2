# handlers/operations.py
# –≠—Ç–∞–ø 4: —Ä—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)

from datetime import datetime
import calendar
import pytz

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from utils.constants import (
    STATE_OP_MENU,
    STATE_OP_FIELD_CHOOSE,
    STATE_SELECT_DATE,
    STATE_SELECT_BANK,
    STATE_SELECT_OPERATION,
    STATE_ENTER_AMOUNT,
    STATE_ENTER_CLASSIFICATION,
    STATE_ENTER_SPECIFIC,
    STATE_CONFIRM,
)
from utils.state import init_user_state
from services.sheets_service import open_finance_and_plans

# –ú–µ—Å—è—Ü—ã –ø–æ-—Ä—É—Å—Å–∫–∏
RU_MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å",
}

def format_op(op: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫, –¥–∞—Ç–∞ –≤ –î–î.MM.–ì–ì–ì–ì."""
    lines = []
    for k, v in op.items():
        if k == "–î–∞—Ç–∞" and v:
            dt = datetime.fromisoformat(v)
            disp = dt.strftime("%d.%m.%Y")
        else:
            disp = v if v is not None else "‚Äî"
        lines.append(f"{k}: {disp}")
    return "\n".join(lines)

# 4.1 ‚Äî –∫–æ–º–∞–Ω–¥–∞ /add
async def start_op(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    tariff = context.user_data.get("tariff", "tariff_free")
    if tariff != "tariff_free":
        return await update.message.reply_text(
            "‚ö†Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ."
        )
    init_user_state(context)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="op_start_add"),
        InlineKeyboardButton("üìã –ú–µ–Ω—é",     callback_data="op_start_menu"),
    ]])
    await update.message.reply_text(
        "‚úèÔ∏è –≠—Ç–∞–ø –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup=kb
    )
    return STATE_OP_MENU

# 4.2 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–î–æ–±–∞–≤–∏—Ç—å¬ª / ¬´–ú–µ–Ω—é¬ª
async def on_op_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    if q.data == "op_start_add":
        return await show_fields_menu(update, context)
    await q.edit_message_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
    return STATE_OP_MENU

# 4.3 ‚Äî –º–µ–Ω—é –ø–æ–ª–µ–π + –∫–Ω–æ–ø–∫–∞ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª + ¬´‚ùå –û—Ç–º–µ–Ω–∞¬ª
async def show_fields_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞",       callback_data="field|–î–∞—Ç–∞"),
         InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",       callback_data="field|–ë–∞–Ω–∫")],
        [InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",   callback_data="field|–û–ø–µ—Ä–∞—Ü–∏—è"),
         InlineKeyboardButton("‚ûñ –°—É–º–º–∞",      callback_data="field|–°—É–º–º–∞")],
        [InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="field|–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
         InlineKeyboardButton("üîç –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="field|–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",      callback_data="op_cancel")],
    ]
    op = context.user_data["pending_op"]
    required = ["–î–∞—Ç–∞", "–ë–∞–Ω–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–°—É–º–º–∞", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"]
    if all(op.get(f) is not None for f in required):
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_op")])

    text = format_op(op)
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update_or_query.message.reply_text(
            text, reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return STATE_OP_FIELD_CHOOSE

# 4.4 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è, ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –∏–ª–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª
async def choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    data = q.data
    if data == "op_cancel":
        return await start_op(update, context)
    if data == "confirm_op":
        return await handle_confirm(update, context)
    field = data.split("|", 1)[1]
    context.user_data["current_field"] = field
    if field == "–î–∞—Ç–∞":
        return await ask_date(update, context)
    if field == "–ë–∞–Ω–∫":
        return await ask_bank(update, context)
    if field == "–û–ø–µ—Ä–∞—Ü–∏—è":
        return await ask_operation(update, context)
    if field == "–°—É–º–º–∞":
        return await ask_amount(update, context)
    if field == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":
        await q.edit_message_text("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é:")
        return STATE_ENTER_CLASSIFICATION
    if field == "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":
        await q.edit_message_text("üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É:")
        return STATE_ENTER_SPECIFIC

# 4.5 ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Ä—É—Å—Å–∫–∏–º–∏ –º–µ—Å—è—Ü–∞–º–∏
def get_prev_year_month(year: int, month: int):
    return (year-1,12) if month==1 else (year,month-1)
def get_next_year_month(year: int, month: int):
    return (year+1,1) if month==12 else (year,month+1)

def create_calendar(year: int, month: int) -> InlineKeyboardMarkup:
    today = datetime.now(pytz.timezone("Europe/Moscow")).date()
    markup = []
    py, pm = get_prev_year_month(year, month)
    ny, nm = get_next_year_month(year, month)
    markup.append([
        InlineKeyboardButton("<", callback_data=f"calendar|{py}|{pm}"),
        InlineKeyboardButton(f"{RU_MONTHS[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton(">", callback_data=f"calendar|{ny}|{nm}")
    ])
    markup.append([InlineKeyboardButton(d, callback_data="ignore") for d in ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]])
    for week in calendar.monthcalendar(year, month):
        row=[]
        for day in week:
            if day==0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                ds=f"{year}-{month:02d}-{day:02d}"
                label=f"üî¥{day}" if (year,month,day)==(today.year,today.month,today.day) else str(day)
                row.append(InlineKeyboardButton(label, callback_data=f"select_date|{ds}"))
        markup.append(row)
    return InlineKeyboardMarkup(markup)

async def ask_date(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    cal = create_calendar(now.year, now.month)
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)
    else:
        await update_or_query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)
    return STATE_SELECT_DATE

async def handle_calendar_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    data = q.data
    if data.startswith("calendar|"):
        _, y, m = data.split("|")
        cal = create_calendar(int(y), int(m))
        await q.edit_message_reply_markup(cal)
        return STATE_SELECT_DATE
    if data.startswith("select_date|"):
        _, ds = data.split("|")
        context.user_data["pending_op"]["–î–∞—Ç–∞"] = ds
        return await show_fields_menu(update, context)

# 4.6 ‚Äî –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ (–±–µ–∑ ¬´–û—Ç–º–µ–Ω–∞¬ª)
async def ask_bank(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    banks = sorted(set(ws.col_values(3)[1:]))
    context.user_data["banks"] = banks
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(b, callback_data=f"select_bank|{b}")] for b in banks])
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    else:
        await update_or_query.message.reply_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=kb)
    return STATE_SELECT_BANK

async def handle_bank_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    context.user_data["pending_op"]["–ë–∞–Ω–∫"] = q.data.split("|",1)[1]
    return await show_fields_menu(update, context)

# 4.7 ‚Äî –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
async def ask_operation(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="select_op|–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        InlineKeyboardButton("–¢—Ä–∞—Ç–∞",      callback_data="select_op|–¢—Ä–∞—Ç–∞"),
        InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥",    callback_data="select_op|–ü–µ—Ä–µ–≤–æ–¥"),
    ]])
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)
    else:
        await update_or_query.message.reply_text("‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)
    return STATE_SELECT_OPERATION

async def handle_operation_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    context.user_data["pending_op"]["–û–ø–µ—Ä–∞—Ü–∏—è"] = q.data.split("|",1)[1]
    return await show_fields_menu(update, context)

# 4.8 ‚Äî –≤–≤–æ–¥ —Å—É–º–º—ã (–±–µ–∑ ¬´–û—Ç–º–µ–Ω–∞¬ª)
async def ask_amount(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    msg = "‚ûñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):"
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text(msg)
    else:
        await update_or_query.message.reply_text(msg)
    return STATE_ENTER_AMOUNT

async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().replace(",",".")
    try:
        amt = float(text)
    except ValueError:
        return await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    opv = context.user_data["pending_op"].get("–û–ø–µ—Ä–∞—Ü–∏—è")
    if opv == "–¢—Ä–∞—Ç–∞" and amt >= 0:
        return await update.message.reply_text("‚ö†Ô∏è –î–ª—è —Ç—Ä–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ >0.")
    if opv == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" and amt < 0:
        return await update.message.reply_text("‚ö†Ô∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ ‚â•0.")
    context.user_data["pending_op"]["–°—É–º–º–∞"] = amt
    return await show_fields_menu(update, context)

# 4.9 ‚Äî –≤–≤–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def input_classification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["pending_op"]["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = update.message.text.strip()
    return await show_fields_menu(update, context)

# 4.10 ‚Äî –≤–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
async def input_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["pending_op"]["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"] = update.message.text.strip()
    return await show_fields_menu(update, context)

# 4.11 ‚Äî –∑–∞–ø–∏—Å—å –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    op = context.user_data["pending_op"]
    dt = datetime.fromisoformat(op["–î–∞—Ç–∞"])
    year = dt.year
    month = RU_MONTHS[dt.month]
    date_str = dt.strftime("%d.%m.%Y")
    row = [
        year, month,
        op["–ë–∞–Ω–∫"], op["–û–ø–µ—Ä–∞—Ü–∏—è"],
        date_str, op["–°—É–º–º–∞"],
        op["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        op.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "-"
    ]
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    ws.append_row(row, value_input_option="USER_ENTERED")
    await q.edit_message_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
    # –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    init_user_state(context)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="op_start_add"),
        InlineKeyboardButton("üìã –ú–µ–Ω—é",     callback_data="op_start_menu"),
    ]])
    await q.message.reply_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )
    return STATE_OP_MENU

# ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–∞ 4 ‚Äî
def register_operations_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("add", start_op)],
        states={
            STATE_OP_MENU: [
                CallbackQueryHandler(on_op_menu, pattern="^op_"),
            ],
            STATE_OP_FIELD_CHOOSE: [
                CallbackQueryHandler(choose_field, pattern="^(field\\||confirm_op|op_cancel)"),
            ],
            STATE_SELECT_DATE: [
                CallbackQueryHandler(handle_calendar_callback, pattern="^(calendar\\||select_date\\|)"),
            ],
            STATE_SELECT_BANK: [
                CallbackQueryHandler(handle_bank_selection, pattern="^select_bank\\|"),
            ],
            STATE_SELECT_OPERATION: [
                CallbackQueryHandler(handle_operation_selection, pattern="^select_op\\|"),
            ],
            STATE_ENTER_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_input),
            ],
            STATE_ENTER_CLASSIFICATION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_classification),
            ],
            STATE_ENTER_SPECIFIC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_specific),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(on_op_menu, pattern="^op_cancel$"),
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
