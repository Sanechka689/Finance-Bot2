# handlers/operations.py
# 2.1 –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —ç—Ç–∞–ø–∞ 4 (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥ –æ–ø–µ—Ä–∞—Ü–∏–π)

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from utils.constants import STATE_OP_FIELD_CHOOSE, STATE_OP_FIELD_INPUT
from utils.state import init_user_state

# === 2.1.1: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /add ===
async def start_op(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 2.1.1.1: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —á–µ—Ä–Ω–æ–≤–∏–∫
    init_user_state(context)
    # 2.1.1.2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ª–µ–π
    return await show_fields_menu(update, context)

# === 2.1.2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è ===
async def show_fields_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data="field|–î–∞—Ç–∞"),
            InlineKeyboardButton("üè¶ –ë–∞–Ω–∫", callback_data="field|–ë–∞–Ω–∫"),
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è", callback_data="field|–û–ø–µ—Ä–∞—Ü–∏—è"),
            InlineKeyboardButton("‚ûñ –°—É–º–º–∞", callback_data="field|–°—É–º–º–∞"),
        ],
        [
            InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="field|–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
            InlineKeyboardButton("üîç –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞", callback_data="field|–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"),
        ],
        [
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_op"),
        ],
    ]
    text = render_pending_op(context.user_data["pending_op"])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if hasattr(update_or_query, "callback_query"):
        await update_or_query.callback_query.edit_message_text(
            text or "‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        await update_or_query.message.reply_text(
            text or "‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    context.user_data["state"] = STATE_OP_FIELD_CHOOSE
    return STATE_OP_FIELD_CHOOSE

# === 2.1.3: –†–µ–Ω–¥–µ—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ===
def render_pending_op(op: dict) -> str:
    lines = []
    for k, v in op.items():
        lines.append(f"{k}: {v if v is not None else '‚Äî'}")
    return "\n".join(lines)

# === 2.1.4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler ===
def register_operations_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("add", start_op)],
        states={
            STATE_OP_FIELD_CHOOSE: [
                CallbackQueryHandler(lambda u, c: None, pattern="^field\\|"),
            ],
            # –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º STATE_OP_FIELD_INPUT
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern="cancel_op")
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
