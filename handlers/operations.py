# handlers/operations.py
# –≠—Ç–∞–ø 4: —Ä—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from utils.constants import (
    STATE_OP_MENU,
    STATE_OP_FIELD_CHOOSE,
    STATE_OP_FIELD_INPUT,
)
from utils.state import init_user_state

# 4.1 ‚Äî –∫–æ–º–∞–Ω–¥–∞ /add
async def start_op(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # 1) –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º
    tariff = context.user_data.get("tariff")
    if tariff is None:
        context.user_data["tariff"] = "tariff_free"
        tariff = "tariff_free"

    # 2) –†–∞–∑—Ä–µ—à–∞–µ–º —Ä—É—á–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ tariff_free
    if tariff != "tariff_free":
        return await update.message.reply_text(
            "‚ö†Ô∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ."
        )

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FSM –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù/‚Äú–ú–µ–Ω—é‚Äù
    init_user_state(context)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="op_start_add")],
        [InlineKeyboardButton("üìã –ú–µ–Ω—é",     callback_data="op_start_menu")],
    ])
    await update.message.reply_text(
        "‚úèÔ∏è –í—ã –Ω–∞ —ç—Ç–∞–ø–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb
    )
    return STATE_OP_MENU


# 4.2 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚Äú–î–æ–±–∞–≤–∏—Ç—å‚Äù / ‚Äú–ú–µ–Ω—é‚Äù
async def on_op_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    if q.data == "op_start_add":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—ã—á–Ω–æ–º—É –º–µ–Ω—é –ø–æ–ª–µ–π
        return await show_fields_menu(update, context)
    else:
        # –ú–µ–Ω—é ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –≤—ã–∑—ã–≤–∞–µ–º –≤–∞—à –≥–ª–∞–≤–Ω—ã–π Menu-handler
        await q.edit_message_text("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
        return ConversationHandler.END

# 4.3 ‚Äî –º–µ–Ω—é –ø–æ–ª–µ–π
async def show_fields_menu(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞",       callback_data="field|–î–∞—Ç–∞"),
         InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",       callback_data="field|–ë–∞–Ω–∫")],
        [InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",   callback_data="field|–û–ø–µ—Ä–∞—Ü–∏—è"),
         InlineKeyboardButton("‚ûñ –°—É–º–º–∞",      callback_data="field|–°—É–º–º–∞")],
        [InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="field|–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
         InlineKeyboardButton("üîç –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="field|–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",      callback_data="cancel_op")],
    ]
    text = render_pending_op(context.user_data["pending_op"])

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∞–ª—å–Ω—ã–π –ª–∏ —ç—Ç–æ CallbackQuery –∏–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update_or_query.callback_query:
        await update_or_query.callback_query.edit_message_text(
            text or "‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        await update_or_query.message.reply_text(
            text or "‚úèÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    context.user_data["state"] = STATE_OP_FIELD_CHOOSE
    return STATE_OP_FIELD_CHOOSE

# 4.4 ‚Äî —Å–±–æ—Ä–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
def render_pending_op(op: dict) -> str:
    return "\n".join(f"{k}: {v if v is not None else '‚Äî'}" for k, v in op.items())

# 4.5 ‚Äî –≤—ã–±–æ—Ä –ø–æ–ª—è
async def choose_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    field = update.callback_query.data.split("|",1)[1]
    context.user_data["current_field"] = field

    prompts = {
        "–î–∞—Ç–∞":          "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –î–î.MM.–ì–ì–ì–ì",
        "–ë–∞–Ω–∫":          "üè¶ –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫",
        "–û–ø–µ—Ä–∞—Ü–∏—è":      "‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–¢—Ä–∞—Ç–∞/–ü–µ—Ä–µ–≤–æ–¥",
        "–°—É–º–º–∞":         "‚ûñ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
        "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": "üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":    "üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É",
    }
    await update.callback_query.edit_message_text(prompts[field])
    context.user_data["state"] = STATE_OP_FIELD_INPUT
    return STATE_OP_FIELD_INPUT

# 4.6 ‚Äî –≤–≤–æ–¥ –ø–æ–ª—è
async def input_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    field = context.user_data["current_field"]
    context.user_data["pending_op"][field] = update.message.text.strip()
    context.user_data["current_field"] = None
    return await show_fields_menu(update, context)

# 4.7 ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler
def register_operations_handlers(app):
    conv = ConversationHandler(
        entry_points=[CommandHandler("add", start_op)],
        states={
            STATE_OP_MENU: [
                CallbackQueryHandler(on_op_menu, pattern="^op_start_"),
            ],
            STATE_OP_FIELD_CHOOSE: [
                CallbackQueryHandler(choose_field, pattern="^field\\|"),
            ],
            STATE_OP_FIELD_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_field),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u,c: ConversationHandler.END, pattern="cancel_op"),
        ],
        allow_reentry=True,
    )
    app.add_handler(conv)
