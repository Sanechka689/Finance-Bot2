# handlers/men_oper.py

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    CallbackQueryHandler, ConversationHandler,
    ContextTypes, MessageHandler, filters
)
from services.sheets_service import open_finance_and_plans
from utils.constants import (
    STATE_OP_MENU,
    STATE_OP_LIST, STATE_OP_SELECT,
    STATE_OP_CONFIRM, STATE_OP_EDIT_CHOICE,
    STATE_OP_EDIT_INPUT
)

# ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ ¬´–Ø ‚Üí –ê¬ª
SORT_REQUEST = {
    "requests":[{ "sortRange": {
        "range": {
            "sheetId":           None,  # –∑–∞–ø–æ–ª–Ω–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            "startRowIndex":     1,
            "startColumnIndex":  0,
            "endColumnIndex":    8,
        },
        "sortSpecs":[{ "dimensionIndex":4, "sortOrder":"DESCENDING" }]
    }}]
}

# ‚Äî —Ç–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª
EXPECTED_HEADERS = ["–ì–æ–¥","–ú–µ—Å—è—Ü","–ë–∞–Ω–∫","–û–ø–µ—Ä–∞—Ü–∏—è","–î–∞—Ç–∞","–°—É–º–º–∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è","–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]

import re

# –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ¬´7 –∏—é–Ω—è, –ø—Ç¬ª –∏ —Ç.–ø.
GENITIVE_MONTHS = {
    "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3,   "–∞–ø—Ä–µ–ª—è": 4,
    "–º–∞—è":    5, "–∏—é–Ω—è":    6, "–∏—é–ª—è":   7,   "–∞–≤–≥—É—Å—Ç–∞": 8,
    "—Å–µ–Ω—Ç—è–±—Ä—è":9, "–æ–∫—Ç—è–±—Ä—è":10, "–Ω–æ—è–±—Ä—è":11, "–¥–µ–∫–∞–±—Ä—è":12,
}


# –ü—Ä–∞–≤–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
async def exit_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã—Ö–æ–¥ –∏–∑ –≤–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    if update.callback_query:
        await update.callback_query.answer()

    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
    from handlers.menu import show_main_menu

    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    return await show_main_menu(update, context)

# –í–µ—Ç–∫–∞ –û–ø–µ—Ä–∞—Ü–∏–∏
async def start_men_oper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –≤–µ—Ç–∫–∏ ¬´–û–ø–µ—Ä–∞—Ü–∏–∏¬ª."""
    query = update.callback_query
    await query.answer()
    url = context.user_data.get("sheet_url")
    if not url:
        return await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")
    
    ws, _ = open_finance_and_plans(url)
    # 1) –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç
    sheet_id = ws._properties["sheetId"]
    SORT_REQUEST["requests"][0]["sortRange"]["range"]["sheetId"] = sheet_id
    ws.spreadsheet.batch_update(SORT_REQUEST)
    
    # 2) –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    all_values = ws.get_all_values()   # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç header + —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_rows = all_values[1:1+10]     # –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
    last_ops = []
    for row_values in data_rows:
        last_ops.append({
            "–ì–æ–¥":             row_values[0],
            "–ú–µ—Å—è—Ü":           row_values[1],
            "–ë–∞–Ω–∫":            row_values[2],
            "–û–ø–µ—Ä–∞—Ü–∏—è":        row_values[3],
            "–î–∞—Ç–∞":            row_values[4],
            "–°—É–º–º–∞":           row_values[5],
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":   row_values[6],
            "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":      row_values[7] or "",
        })
    context.user_data["last_ops"] = last_ops

    # 3) –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines = []
    for i, row in enumerate(last_ops):
        lines.append(
            f"{i}. {row['–ë–∞–Ω–∫']}   {row['–°—É–º–º–∞']}   {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}   {row['–î–∞—Ç–∞']}"
        )
    text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:*\n" + "\n".join(lines)

    # 4) –ö–Ω–æ–ø–∫–∏: –ø–æ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –µ—ë –Ω–æ–º–µ—Ä, –∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ –º–µ–Ω—é
    kb = [
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [1, 2, 3] if i < len(last_ops)],
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [4, 5, 6] if i < len(last_ops)],
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [7, 8, 9] if i < len(last_ops)],
    ]
    # ¬´0¬ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º 0
    if len(last_ops) > 0:
        kb.append([InlineKeyboardButton("0", callback_data="op_select_0")])
    # –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:open")])

    await query.edit_message_text(
        text, parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return STATE_OP_SELECT


async def handle_op_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –Ω–æ–º–µ—Ä 0‚Äì9 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ + –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[-1])
    row = context.user_data["last_ops"][idx]
        # row ‚Äî —ç—Ç–æ dict —Å –ø–æ–ª—è–º–∏ –∏–∑ –ª–∏—Å—Ç–∞
    context.user_data["editing_op"] = {
        "index":    idx,
        "original": row.copy(),   # —Å–∫–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ
        "data":     row           # —Å—é–¥–∞ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
    detail = (
        f"üìã *–û–ø–µ—Ä–∞—Ü–∏—è #{idx}:*\n"
        f"üè¶ –ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
        f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
        f"üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
        f"üí∞ –°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
        f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
        f"üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}"
    )

    # –ö–Ω–æ–ø–∫–∏
    buttons = []
    buttons += [
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="op_edit"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="op_delete"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",   callback_data="op_back"),
    ]

    await query.edit_message_text(
        detail, parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([buttons])
    )
    return STATE_OP_CONFIRM


async def handle_op_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ."""
    query = update.callback_query
    await query.answer("–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶", show_alert=False)

    # 1) –î–æ—Å—Ç–∞—ë–º URL –∏ –¥–∞–Ω–Ω—ã–µ
    url = context.user_data.get("sheet_url")
    edit = context.user_data.get("editing_op", {})
    orig = edit.get("original")   # –°–¢–ê–†–´–ï –∑–Ω–∞—á–µ–Ω–∏—è
    new  = edit.get("data")       # –ù–û–í–´–ï –∑–Ω–∞—á–µ–Ω–∏—è

    if not url or not orig or not new:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return await start_men_oper(update, context)

    # 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    ws, _ = open_finance_and_plans(url)

    # 3) –ò—â–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ë–∞–Ω–∫/–î–∞—Ç–∞/–°—É–º–º–∞
    all_vals = ws.get_all_values()
    row_number = None
    for i, values in enumerate(all_vals[1:], start=2):
        if (
            values[2] == orig["–ë–∞–Ω–∫"] and
            values[4] == orig["–î–∞—Ç–∞"] and
            values[5] == str(orig["–°—É–º–º–∞"])
        ):
            row_number = i
            break

    if not row_number:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return await start_men_oper(update, context)

    # 4) –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º A‚ÄìH
    # ‚Äî‚Äî‚Äî –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã –≤ DD.MM.YYYY ‚Äî‚Äî‚Äî
    raw_date = new.get("–î–∞—Ç–∞")
    # –µ—Å–ª–∏ —É–∂–µ –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    if re.match(r"^\d{4}-\d{2}-\d{2}$", raw_date):
        y, m, d = raw_date.split("-")
        date_for_sheet = f"{d}.{m}.{y}"
    else:
        # –æ–∂–∏–¥–∞–µ–º –≤–∏–¥ "11 –∏—é–ª—è, –ø—Ç" –∏–ª–∏ "11 –∏—é–ª—è"
        day_month = raw_date.split(",", 1)[0].strip()   # "11 –∏—é–ª—è"
        parts = day_month.split()
        try:
            day = int(parts[0])
            gen_month = parts[1].lower()
            month = GENITIVE_MONTHS.get(gen_month, 0)
            year = int(new.get("–ì–æ–¥"))
            date_for_sheet = f"{day:02d}.{month:02d}.{year}"
        except Exception:
            # –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            date_for_sheet = raw_date
            
    # 5) –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º A‚ÄìH        
    new_row = [
        new.get("–ì–æ–¥"),
        new.get("–ú–µ—Å—è—Ü"),
        new.get("–ë–∞–Ω–∫"),
        new.get("–û–ø–µ—Ä–∞—Ü–∏—è"),
        date_for_sheet,
        new.get("–°—É–º–º–∞"),
        new.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
        new.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "-"
    ]

    # 5) –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    cell_range = f"A{row_number}:H{row_number}"
    ws.update(cell_range, [new_row], value_input_option="USER_ENTERED")

    # 6) –£–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
    await query.edit_message_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    context.user_data.pop("editing_op", None)
    return await start_men_oper(update, context)


async def handle_op_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query

    await query.answer()
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é pop-up –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    await query.edit_message_text("üóë –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")

    # —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    row = context.user_data["editing_op"]["data"]

    # –ø–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    try:
        target_sum = float(
            str(row["–°—É–º–º–∞"])
            .replace("\xa0","")
            .replace(" ","")
            .replace(",",".")
        )
    except (KeyError, ValueError):
        target_sum = None  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    all_vals = ws.get_all_values()
    for idx, values in enumerate(all_vals[1:], start=2):
        bank_cell = values[2]
        date_cell = values[4]
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—É–º–º—É –∏–∑ –ª–∏—Å—Ç–∞
        try:
            sum_cell = float(
                str(values[5])
                .replace("\xa0","")
                .replace(" ","")
                .replace(",",".")
            )
        except ValueError:
            continue

        if (
            bank_cell == row["–ë–∞–Ω–∫"] and
            date_cell == row["–î–∞—Ç–∞"] and
            (target_sum is None or sum_cell == target_sum)
        ):
            ws.delete_rows(idx)
            break

    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –æ–ø–µ—Ä–∞—Ü–∏–π
    return await start_men_oper(update, context)

async def handle_op_edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()

    edit = context.user_data["editing_op"]
    idx = edit["index"]
    row = edit["data"]

    # –°–æ–±–∏—Ä–∞–µ–º detail-card —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ handle_op_select
    detail = (
        f"üìã *–û–ø–µ—Ä–∞—Ü–∏—è #{idx}:*\n"
        f"üè¶ –ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
        f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
        f"üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
        f"üí∞ –°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
        f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
        f"üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}\n\n"
    )

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    kb = [
    [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",           callback_data="edit_bank"),
     InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",       callback_data="edit_operation")],
    [InlineKeyboardButton("üìÖ –î–∞—Ç–∞",           callback_data="edit_date"),
     InlineKeyboardButton("üí∞ –°—É–º–º–∞",          callback_data="edit_sum")],
    [InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  callback_data="edit_classification"),
     InlineKeyboardButton("üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="edit_specific")],
    ]

    # ‚Äî‚Äî‚Äî —Å—Ç—Ä–æ–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª + ¬´–ù–∞–∑–∞–¥¬ª:
    required = ["–ë–∞–Ω–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"]
    last_row = []
    if all(row.get(f) for f in required):
        last_row.append(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="op_save"))
    last_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="op_back"))
    kb.append(last_row)

    await update.callback_query.edit_message_text(
        detail + "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return STATE_OP_EDIT_CHOICE

async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ask_*."""
    query = update.callback_query
    await query.answer()

    # 1) –î–æ—Å—Ç–∞—ë–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –ø—Ä–∞–≤–∏–º:
    field = query.data.split("_", 1)[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä "bank", "operation" –∏ —Ç.–ø.
    context.user_data["edit_field"] = field

    # 2) –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    row = context.user_data["editing_op"]["data"]

    # 3) –õ–æ–∫–∞–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ ask_* —á—Ç–æ–±—ã —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    from handlers.operations import (
        ask_operation,
        ask_amount as ask_sum,
        ask_date,)
    from .men_oper import (
        ask_classification_edit,
        ask_specific_edit,)

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ ¬´–∫–ª—é—á ‚Üí (–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ–ò–º—è, –§—É–Ω–∫—Ü–∏—è-–æ–ø—Ä–æ—Å–Ω–∏–∫)¬ª
    mapping = {
        "bank":           ("–ë–∞–Ω–∫",           ask_bank),
        "operation":      ("–û–ø–µ—Ä–∞—Ü–∏—è",       ask_operation_edit),
        "date":           ("–î–∞—Ç–∞",           ask_date_edit),
        "sum":            ("–°—É–º–º–∞",          ask_sum_edit),
        "classification": ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  ask_classification_edit),
        "specific":       ("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     ask_specific_edit),
    }
    display_name, handler = mapping[field]

    # 5) –í—ã–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    current = row.get(display_name) or ""
    return await handler(update, context, current)


# ‚Äî‚Äî‚Äî –®–∞–≥ 1: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ë–∞–Ω–∫ ‚Äî‚Äî‚Äî
async def ask_bank(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–π –ë–∞–Ω–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–∑ –µ–≥–æ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤.
    """
    # –°–Ω–∏–º–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—ç—à–∏—Ä—É–µ–º)
    banks = context.user_data.get("user_banks")
    if banks is None:
        ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
        rows = ws.get_all_values()[1:]
        banks = sorted({ row[2] for row in rows if row[2] })
        context.user_data["user_banks"] = banks

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = [[InlineKeyboardButton(b, callback_data=f"edit_bank_choice_{b}")] for b in banks]

    text = (
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ *–ë–∞–Ω–∫* ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "
        f"`{current_value or '‚Äî'}`?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )
    await query.edit_message_text(text, parse_mode="Markdown",
                                  reply_markup=InlineKeyboardMarkup(kb))
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–æ–π)
    return STATE_OP_EDIT_INPUT


async def handle_bank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. 
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    await update.callback_query.answer()
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –∏–∑ callback_data
    _, _, _, selected = update.callback_query.data.split("_", 3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º
    banks = context.user_data.get("user_banks", [])
    if selected not in banks:
        await update.callback_query.edit_message_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ *—Ç–æ–ª—å–∫–æ* –∏–∑ —Å–ø–∏—Å–∫–∞!", parse_mode="Markdown")
        return STATE_OP_EDIT_INPUT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞–Ω–∫ –≤ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    context.user_data["editing_op"]["data"]["–ë–∞–Ω–∫"] = selected

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –±–∞–Ω–∫–æ–º)
    return await handle_op_edit_choice(update, context)

# ‚Äî‚Äî‚Äî –®–∞–≥ 2: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´–û–ø–µ—Ä–∞—Ü–∏—è¬ª ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ask_bank ‚Äî‚Äî‚Äî
async def ask_operation_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    # –£–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message

    # –¢–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    text = (
        f"‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏* ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "
        f"`{current_value or '‚Äî'}`\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:"
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    kb = [[
        InlineKeyboardButton("üîº –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="edit_operation_choice_–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        InlineKeyboardButton("üîΩ –¢—Ä–∞—Ç–∞",       callback_data="edit_operation_choice_–¢—Ä–∞—Ç–∞"),
    ]]

    # –†–∏—Å—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    return STATE_OP_EDIT_INPUT


async def handle_operation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ editing_op –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    await update.callback_query.answer()
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ _
    selected = update.callback_query.data.rsplit("_", 1)[-1]

    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ ¬´–û–ø–µ—Ä–∞—Ü–∏—è¬ª –≤ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    context.user_data["editing_op"]["data"]["–û–ø–µ—Ä–∞—Ü–∏—è"] = selected

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (STATE_OP_EDIT_CHOICE)
    return await handle_op_edit_choice(update, context)

# ‚Äî‚Äî‚Äî –®–∞–≥ 3: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –î–∞—Ç—É ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ask_bank –∏ ask_operation_edit ‚Äî‚Äî‚Äî
async def ask_date_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é –î–∞—Ç—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-–∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    # —É–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ handlers.operations
    from handlers.operations import create_calendar

    # –ø–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—ë –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    # –µ—Å–ª–∏ current_value –≤ —Ñ–æ—Ä–º–∞—Ç–µ "YYYY-MM-DD", –≤–æ–∑—å–º—ë–º –≥–æ–¥/–º–µ—Å—è—Ü, –∏–Ω–∞—á–µ ‚Äî —Å–µ–≥–æ–¥–Ω—è
    try:
        year, month, _ = map(int, current_value.split("-"))
    except:
        from datetime import datetime
        now = datetime.now()
        year, month = now.year, now.month

    # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
    cal = create_calendar(year, month)

    # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=cal
    )

    # –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–¥–∞—ë—Ç callback_data –≤–∏–¥–∞ select_date|YYYY-MM-DD
    # –º—ã –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ –≤ STATE_OP_EDIT_INPUT
    return STATE_OP_EDIT_INPUT

async def handle_date_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_data 'select_date|YYYY-MM-DD' –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    q = update.callback_query
    await q.answer()

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç–∞-—Å—Ç—Ä–æ–∫—É
    _, ds = q.data.split("|", 1)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ editing_op
    context.user_data["editing_op"]["data"]["–î–∞—Ç–∞"] = ds

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π (STATE_OP_EDIT_CHOICE)
    return await handle_op_edit_choice(update, context)

# ‚Äî‚Äî‚Äî –®–∞–≥ 4: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –°—É–º–º—É ‚Äî‚Äî‚Äî
async def ask_sum_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é –°—É–º–º—É.
    """
    # –£–±–∏—Ä–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message

    # üöÄ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    context.user_data["last_edit_message"] = query.message

    text = (
        f"‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é *–°—É–º–º—É* ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{current_value}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä `1234.56` –∏–ª–∏ `-1234.56`."
    )
    # –£–±–∏—Ä–∞–µ–º –Ω–∞ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await query.edit_message_reply_markup(reply_markup=None)
    await query.edit_message_text(text, parse_mode="Markdown")
    return STATE_OP_EDIT_INPUT

# ‚Äî‚Äî‚Äî –®–∞–≥ 5: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é ¬´–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é¬ª ‚Äî‚Äî‚Äî
async def ask_classification_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é.
    """
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message
    # üöÄ –ó–∞–ø–æ–º–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
    context.user_data["last_edit_message"] = query.message

    text = (
        f"‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é *–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é* ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{current_value or '‚Äî'}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    )
    await query.edit_message_reply_markup(reply_markup=None)
    await query.edit_message_text(text, parse_mode="Markdown")
    return STATE_OP_EDIT_INPUT

# ‚Äî‚Äî‚Äî –®–∞–≥ 6: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é ¬´–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É¬ª ‚Äî‚Äî‚Äî
async def ask_specific_edit(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—É—é –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.
    """
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message
    # üöÄ –ó–∞–ø–æ–º–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –µ–≥–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å
    context.user_data["last_edit_message"] = query.message

    text = (
        f"‚ûñ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é *–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É* ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{current_value or '‚Äî'}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
    )
    await query.edit_message_reply_markup(reply_markup=None)
    await query.edit_message_text(text, parse_mode="Markdown")
    return STATE_OP_EDIT_INPUT


async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è –°—É–º–º—É.
    –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –°—É–º–º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    text = update.message.text.strip()
    field = context.user_data["edit_field"]
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Üí –∏–º—è —Å—Ç–æ–ª–±—Ü–∞
    rev_map = {
        "bank":           "–ë–∞–Ω–∫",
        "operation":      "–û–ø–µ—Ä–∞—Ü–∏—è",
        "date":           "–î–∞—Ç–∞",
        "sum":            "–°—É–º–º–∞",
        "classification": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "specific":       "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"
    }
    col = rev_map[field]
    row = context.user_data["editing_op"]["data"]

    # ====== –°–£–ú–ú–ê ======
    if field == "sum":
        # –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞
        try:
            val = float(text.replace(",", "."))
        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã, "
                "–Ω–∞–ø—Ä–∏–º–µ—Ä `1234.56` –∏–ª–∏ `-1234.56`."
            )
            return STATE_OP_EDIT_INPUT
        
        # 2) –î–æ—Å—Ç–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
        op_type = row.get("–û–ø–µ—Ä–∞—Ü–∏—è", "")
        # 3) –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
        if op_type == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" and val <= 0:
            await update.message.reply_text(
                "‚ö†Ô∏è –î–ª—è *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è* —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π."
                "\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤–∏–¥–∞ `1234.56`."
                , parse_mode="Markdown"
            )
            return STATE_OP_EDIT_INPUT
        if op_type == "–¢—Ä–∞—Ç–∞" and val >= 0:
            await update.message.reply_text(
                "‚ö†Ô∏è –î–ª—è *–¢—Ä–∞—Ç—ã* —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π."
                "\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤–∏–¥–∞ `-1234.56`."
                , parse_mode="Markdown"
            )
            return STATE_OP_EDIT_INPUT

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        row[col] = val

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
        detail = (
            f"üìã *–û–ø–µ—Ä–∞—Ü–∏—è #{context.user_data['editing_op']['index']}:*\n"
            f"üè¶ –ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
            f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
            f"üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
            f"üí∞ –°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
            f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
            f"üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row.get('–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞') or '‚Äî'}\n\n"
        )

        # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ –∏ –≤ STATE_OP_EDIT_CHOICE
        kb = [
            [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",           callback_data="edit_bank"),
             InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",       callback_data="edit_operation")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞",           callback_data="edit_date"),
             InlineKeyboardButton("üí∞ –°—É–º–º–∞",          callback_data="edit_sum")],
            [InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  callback_data="edit_classification"),
             InlineKeyboardButton("üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="edit_specific")],
        ]
        # —Å—Ç—Ä–æ–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª + ¬´–ù–∞–∑–∞–¥¬ª
        required = ["–ë–∞–Ω–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"]
        last_row = []
        if all(row.get(f) for f in required):
            last_row.append(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="op_save"))
        last_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="op_back"))
        kb.append(last_row)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥ –≤–≤–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text(
            detail + "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return STATE_OP_EDIT_CHOICE

    # ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏¬ª –∏ ¬´–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏¬ª ‚Äî‚Äî‚Äî
    if field in ("classification", "specific"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        row[col] = text

        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        detail = (
            f"üìã *–û–ø–µ—Ä–∞—Ü–∏—è #{context.user_data['editing_op']['index']}:*\n"
            f"üè¶ –ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
            f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
            f"üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
            f"üí∞ –°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
            f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
            f"üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row.get('–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞') or '‚Äî'}\n\n"
        )
        kb = [
            [InlineKeyboardButton("üè¶ –ë–∞–Ω–∫",           callback_data="edit_bank"),
             InlineKeyboardButton("‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è",       callback_data="edit_operation")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞",           callback_data="edit_date"),
             InlineKeyboardButton("üí∞ –°—É–º–º–∞",          callback_data="edit_sum")],
            [InlineKeyboardButton("üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  callback_data="edit_classification"),
             InlineKeyboardButton("üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="edit_specific")],
        ]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–ù–∞–∑–∞–¥
        required = ["–ë–∞–Ω–∫", "–û–ø–µ—Ä–∞—Ü–∏—è", "–î–∞—Ç–∞", "–°—É–º–º–∞", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"]
        last_row = []
        if all(row.get(f) for f in required):
            last_row.append(InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="op_save"))
        last_row.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="op_back"))
        kb.append(last_row)

        await update.message.reply_text(
            detail + "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return STATE_OP_EDIT_CHOICE

    # ‚Äî‚Äî‚Äî –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–±–∞–Ω–∫, –æ–ø–µ—Ä–∞—Ü–∏—è, –¥–∞—Ç–∞) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
    row[col] = text
    return await handle_op_edit_choice(update, context)

    # ‚Äî‚Äî‚Äî –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–±–∞–Ω–∫, –æ–ø–µ—Ä–∞—Ü–∏—è, –¥–∞—Ç–∞) ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî‚Äî‚Äî
    row[col] = text
    return await handle_op_edit_choice(update, context)



async def handle_op_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    ¬´üîô –ù–∞–∑–∞–¥¬ª ‚Äî –µ—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ
    —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∏–Ω–∞—á–µ ‚Äî –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    q = update.callback_query
    await q.answer()  # —É–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏

    edit = context.user_data.get("editing_op")
    if edit:
        idx = edit["index"]
        row = edit["data"]
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ handle_op_select
        text = (
            f"üìã *–û–ø–µ—Ä–∞—Ü–∏—è #{idx}:*\n"
            f"üè¶ –ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
            f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
            f"üìÖ –î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
            f"üí∞ –°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
            f"üè∑Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
            f"üìÑ –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}"
        )
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ –∂–µ, —á—Ç–æ –∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        buttons = [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="op_edit"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å",  callback_data="op_delete"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",    callback_data="op_back"),
        ]
        await q.edit_message_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([buttons])
        )
        return STATE_OP_CONFIRM

    # –µ—Å–ª–∏ editing_op –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π
    return await start_men_oper(update, context)


async def handle_save_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Google Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É."""
    q = update.callback_query
    await q.answer()

    # 1) –ë–µ—Ä—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    edit = context.user_data.get("editing_op", {})
    orig = edit.get("original")
    new  = edit.get("data")
    url  = context.user_data.get("sheet_url")
    if not orig or not new or not url:
        await q.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        return await start_men_oper(update, context)

    # 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç
    ws, _ = open_finance_and_plans(url)

    # 3) –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–ª—è–º (–ë–∞–Ω–∫, –î–∞—Ç–∞, –°—É–º–º–∞)
    all_vals = ws.get_all_values()
    row_number = None
    for i, values in enumerate(all_vals[1:], start=2):
        if (
            values[2] == orig["–ë–∞–Ω–∫"] and
            values[4] == orig["–î–∞—Ç–∞"] and
            values[5] == str(orig["–°—É–º–º–∞"]) and
            values[6] == orig.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "")
        ):
            row_number = i
            break

    if not row_number:
        await q.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return await start_men_oper(update, context)

    # 4) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –≤ ISO (YYYY-MM-DD), –¥–∞–∂–µ –µ—Å–ª–∏ –µ—ë –Ω–µ —Ç—Ä–æ–≥–∞–ª–∏
    date_val = new.get("–î–∞—Ç–∞")
    # –µ—Å–ª–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º
    if not re.match(r"^\d{4}-\d{2}-\d{2}$", date_val):
        # –æ–∂–∏–¥–∞–µ–º –≤–∏–¥ "7 –∏—é–Ω—è, –ø—Ç" –∏–ª–∏ "7 –∏—é–Ω—è"
        day_month = date_val.split(",", 1)[0].strip()  # "7 –∏—é–Ω—è"
        parts = day_month.split()
        try:
            day = int(parts[0])
            gen = parts[1].lower()
            month = GENITIVE_MONTHS.get(gen)
            year = int(new.get("–ì–æ–¥"))
            date_val = f"{year}-{month:02d}-{day:02d}"
        except Exception:
            # –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥
            pass

    # 5) –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ A‚ÄìH
    new_row = [
        new.get("–ì–æ–¥"),
        new.get("–ú–µ—Å—è—Ü"),
        new.get("–ë–∞–Ω–∫"),
        new.get("–û–ø–µ—Ä–∞—Ü–∏—è"),
        date_val,
        new.get("–°—É–º–º–∞"),
        new.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"),
        new.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "-"
    ]

    # 6) –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
    cell_range = f"A{row_number}:H{row_number}"
    ws.update(cell_range, [new_row], value_input_option="USER_ENTERED")

    # 7) –£–≤–µ–¥–æ–º–ª—è–µ–º –∏ —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await q.edit_message_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    context.user_data.pop("editing_op", None)

    # 8) –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    return await start_men_oper(update, context)



def register_men_oper_handlers(app):
    conv = ConversationHandler(
        entry_points=[ CallbackQueryHandler(start_men_oper, pattern=r"^menu:men_oper$") ],
        states={
            STATE_OP_LIST: [
                CallbackQueryHandler(start_men_oper, pattern=r"^menu:men_oper$")
            ],
            STATE_OP_SELECT: [
                CallbackQueryHandler(handle_op_select, pattern=r"^op_select_\d+$"),
                CallbackQueryHandler(exit_to_main_menu, pattern=r"^menu:open$")
            ],
            STATE_OP_CONFIRM: [
                CallbackQueryHandler(handle_op_delete,  pattern=r"^op_delete$"),
                CallbackQueryHandler(handle_op_edit_choice, pattern=r"^op_edit$"),
                CallbackQueryHandler(handle_op_back,     pattern=r"^op_back$")
            ],
            STATE_OP_EDIT_CHOICE: [
                CallbackQueryHandler(handle_edit_field,
                                     pattern=r"^edit_(bank|operation|date|sum|classification|specific)$"),
                CallbackQueryHandler(handle_save_edit, pattern=r"^op_save$"),                     
                CallbackQueryHandler(handle_op_back, pattern=r"^op_back$")
            ],
            # —ç—Ç–æ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–∞–º–∏ ask_* –∏–∑ handlers/operations –∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å STATE_OP_EDIT_INPUT
            STATE_OP_EDIT_INPUT: [
                # —Å—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                CallbackQueryHandler(handle_bank_choice, pattern=r"^edit_bank_choice_.+$"),
                CallbackQueryHandler(handle_operation_choice, pattern=r"^edit_operation_choice_.+$"),
                CallbackQueryHandler(handle_date_choice,      pattern=r"^select_date\|[\d\-]+$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_input),
            ],
        },
        fallbacks=[ CallbackQueryHandler(exit_to_main_menu, pattern=r"^menu:open$") ],
        allow_reentry=True,
    )
    app.add_handler(conv)
