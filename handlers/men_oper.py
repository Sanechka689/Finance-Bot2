# handlers/men_oper.py

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    CallbackQueryHandler, ConversationHandler,
    ContextTypes, MessageHandler, filters
)
from services.sheets_service import open_finance_and_plans
from utils.constants import (
    STATE_OP_MENU,
    STATE_OP_LIST, STATE_OP_SELECT,
    STATE_OP_CONFIRM, STATE_OP_EDIT_CHOICE,
    STATE_OP_EDIT_INPUT
)

import logging #–õ–æ–≥–∏

logger = logging.getLogger(__name__) #–õ–æ–≥–∏
# –£—Ä–æ–≤–µ–Ω—å –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –¥–æ INFO –∏–ª–∏ DEBUG –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π:
logger.setLevel(logging.DEBUG) #–õ–æ–≥–∏


# ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ ¬´–Ø ‚Üí –ê¬ª
SORT_REQUEST = {
    "requests":[{ "sortRange": {
        "range": {
            "sheetId":           None,  # –∑–∞–ø–æ–ª–Ω–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            "startRowIndex":     1,
            "startColumnIndex":  0,
            "endColumnIndex":    8,
        },
        "sortSpecs":[{ "dimensionIndex":4, "sortOrder":"DESCENDING" }]
    }}]
}

# ‚Äî —Ç–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª
EXPECTED_HEADERS = ["–ì–æ–¥","–ú–µ—Å—è—Ü","–ë–∞–Ω–∫","–û–ø–µ—Ä–∞—Ü–∏—è","–î–∞—Ç–∞","–°—É–º–º–∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è","–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]


# –ü—Ä–∞–≤–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
async def exit_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã—Ö–æ–¥ –∏–∑ –≤–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    if update.callback_query:
        await update.callback_query.answer()

    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
    from handlers.menu import show_main_menu

    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    return await show_main_menu(update, context)

# –í–µ—Ç–∫–∞ –û–ø–µ—Ä–∞—Ü–∏–∏
async def start_men_oper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –≤–µ—Ç–∫–∏ ¬´–û–ø–µ—Ä–∞—Ü–∏–∏¬ª."""
    query = update.callback_query
    await query.answer()
    url = context.user_data.get("sheet_url")
    if not url:
        return await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")
    
    ws, _ = open_finance_and_plans(url)
    # 1) –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç
    sheet_id = ws._properties["sheetId"]
    SORT_REQUEST["requests"][0]["sortRange"]["range"]["sheetId"] = sheet_id
    ws.spreadsheet.batch_update(SORT_REQUEST)
    
    # 2) –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    all_values = ws.get_all_values()   # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç header + —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_rows = all_values[1:1+10]     # –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
    last_ops = []
    for row_values in data_rows:
        last_ops.append({
            "–ì–æ–¥":             row_values[0],
            "–ú–µ—Å—è—Ü":           row_values[1],
            "–ë–∞–Ω–∫":            row_values[2],
            "–û–ø–µ—Ä–∞—Ü–∏—è":        row_values[3],
            "–î–∞—Ç–∞":            row_values[4],
            "–°—É–º–º–∞":           row_values[5],
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":   row_values[6],
            "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":      row_values[7] or "",
        })
    context.user_data["last_ops"] = last_ops

    # 3) –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines = []
    for i, row in enumerate(last_ops):
        lines.append(
            f"{i}. {row['–ë–∞–Ω–∫']}  {row['–°—É–º–º–∞']}  {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}, {row['–î–∞—Ç–∞']}"
        )
    text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:*\n" + "\n".join(lines)

    # 4) –ö–Ω–æ–ø–∫–∏: –ø–æ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –µ—ë –Ω–æ–º–µ—Ä, –∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ –º–µ–Ω—é
    kb = [
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [1, 2, 3] if i < len(last_ops)],
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [4, 5, 6] if i < len(last_ops)],
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [7, 8, 9] if i < len(last_ops)],
    ]
    # ¬´0¬ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º 0
    if len(last_ops) > 0:
        kb.append([InlineKeyboardButton("0", callback_data="op_select_0")])
    # –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:open")])

    await query.edit_message_text(
        text, parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return STATE_OP_SELECT


async def handle_op_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –Ω–æ–º–µ—Ä 0‚Äì9 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ + –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[-1])
    row = context.user_data["last_ops"][idx]
    context.user_data["editing_op"] = {"index": idx, "data": row}

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
    detail = (
        f"*–û–ø–µ—Ä–∞—Ü–∏—è #{idx}:*\n"
        f"–ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
        f"–î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
        f"–°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
        f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
        f"–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}"
    )

    # –ö–Ω–æ–ø–∫–∏
    buttons = []
    buttons = [
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="op_edit"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="op_delete"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",   callback_data="op_back"),
    ]

    await query.edit_message_text(
        detail, parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([buttons])
    )
    return STATE_OP_CONFIRM


async def handle_op_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)."""
    query = update.callback_query
    await query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é‚Ä¶", show_alert=False)

    url = context.user_data["sheet_url"]
    ws, _ = open_finance_and_plans(url)
    edit = context.user_data["editing_op"]
    row = edit["data"]

    # 1) –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ (–ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É —Å–æ—á–µ—Ç–∞–Ω–∏—é)
    all_values = ws.get_all_values()
    # –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π ‚Äî —à–∞–ø–∫–∞, –ø–æ—Ç–æ–º data:
    row_number = None
    for i, values in enumerate(all_values[1:], start=2):
        if (values[2], values[4], values[5]) == (row["–ë–∞–Ω–∫"], row["–î–∞—Ç–∞"], str(row["–°—É–º–º–∞"])):
            row_number = i
            break
    if row_number:
        ws.delete_rows(row_number)
    # 2) –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –∂–µ
    new_row = [
        row["–ì–æ–¥"], row["–ú–µ—Å—è—Ü"], row["–ë–∞–Ω–∫"], row["–û–ø–µ—Ä–∞—Ü–∏—è"],
        row["–î–∞—Ç–∞"], row["–°—É–º–º–∞"], row["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"], row.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "-"
    ]
    ws.append_row(new_row, value_input_option="USER_ENTERED")

    await query.edit_message_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await start_men_oper(update, context)


async def handle_op_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query

    await query.answer()
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é pop-up –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    await query.edit_message_text("üóë –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")

    # —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    row = context.user_data["editing_op"]["data"]

    # –ø–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    try:
        target_sum = float(
            str(row["–°—É–º–º–∞"])
            .replace("\xa0","")
            .replace(" ","")
            .replace(",",".")
        )
    except (KeyError, ValueError):
        target_sum = None  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    all_vals = ws.get_all_values()
    for idx, values in enumerate(all_vals[1:], start=2):
        bank_cell = values[2]
        date_cell = values[4]
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—É–º–º—É –∏–∑ –ª–∏—Å—Ç–∞
        try:
            sum_cell = float(
                str(values[5])
                .replace("\xa0","")
                .replace(" ","")
                .replace(",",".")
            )
        except ValueError:
            continue

        if (
            bank_cell == row["–ë–∞–Ω–∫"] and
            date_cell == row["–î–∞—Ç–∞"] and
            (target_sum is None or sum_cell == target_sum)
        ):
            ws.delete_rows(idx)
            break

    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –æ–ø–µ—Ä–∞—Ü–∏–π
    return await start_men_oper(update, context)

# 3 ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
async def handle_op_edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.debug("ENTER handle_op_edit_choice ‚Äî callback_data=%s user=%s", query.data, update.effective_user.id) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π
    kb = [
        [InlineKeyboardButton("–ë–∞–Ω–∫",          callback_data="edit_bank"),
         InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏—è",      callback_data="edit_operation")],
        [InlineKeyboardButton("–î–∞—Ç–∞",          callback_data="edit_date"),
         InlineKeyboardButton("–°—É–º–º–∞",         callback_data="edit_sum")],
        [InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", callback_data="edit_classification"),
         InlineKeyboardButton("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",    callback_data="edit_specific")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="edit_confirm"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",       callback_data="edit_cancel")],
    ]
    # 3.1 –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ handle_op_select
    row = context.user_data["editing_op"]["data"]
    detail = (
        f"*–û–ø–µ—Ä–∞—Ü–∏—è #{context.user_data['editing_op']['index']}:*\n"
        f"–ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
        f"–î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
        f"–°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
        f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
        f"–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}\n\n"
        "‚ùì *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?*"
    )
    await query.edit_message_text(
        detail,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    return STATE_OP_EDIT_CHOICE


# 4 ‚Äî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º prompt —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º,
# –∑–∞—Ç–µ–º –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ask_*-—Ö–µ–Ω–¥–ª–µ—Ä
async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.debug("handle_edit_field called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    field_key = query.data.split("_", 1)[1]  # e.g. "bank", "date" –∏ —Ç.–¥.

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—è –∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    row = context.user_data["editing_op"]["data"]
    rev_map = {
        "bank":           "–ë–∞–Ω–∫",
        "operation":      "–û–ø–µ—Ä–∞—Ü–∏—è",
        "date":           "–î–∞—Ç–∞",
        "sum":            "–°—É–º–º–∞",
        "classification": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "specific":       "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"
    }
    display_name = rev_map[field_key]
    current = row.get(display_name) or "‚Äî"
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´{display_name}¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?"
    )

    # –í—ã–±–∏—Ä–∞–µ–º, –≤ –∫–∞–∫–æ–π ask_* –ø–µ—Ä–µ–¥–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    mapping = {
        "bank":           ask_edit_bank,           # 5.1
        "operation":      ask_edit_operation,      # 5.2
        "date":           ask_edit_date,           # 5.3
        "sum":            ask_edit_sum,            # 5.4
        "classification": ask_edit_classification, # 5.5
        "specific":       ask_edit_specific,       # 5.6
    }
    handler = mapping[field_key]

    # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–∏–π value –≤ handler —á–µ—Ä–µ–∑ context.user_data
    context.user_data["edit_current"] = current
    return await handler(update, context)

async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    logger.debug("handle_edit_input called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    text = update.message.text
    field = context.user_data["edit_field"]
    # –û–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á ‚Üí –≤–∞—à–µ –ø–æ–ª–µ –≤ row
    rev_map = {
        "bank": "–ë–∞–Ω–∫", "operation": "–û–ø–µ—Ä–∞—Ü–∏—è",
        "date": "–î–∞—Ç–∞", "sum": "–°—É–º–º–∞",
        "classification": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "specific": "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"
    }
    row = context.user_data["editing_op"]["data"]
    row[rev_map[field]] = text

    # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —ç—Ç–æ–π –∂–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ handle_op_select, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    return await handle_op_select(update, context)

async def handle_op_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """¬´–ù–∞–∑–∞–¥¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    return await start_men_oper(update, context)

# ‚Äî‚îÅ‚îÅ 5. –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ‚îÅ‚îÅ‚Äî

async def ask_edit_bank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """5.1 ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."""
    query = update.callback_query; await query.answer()
    logger.debug("ask_edit_bank called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]
    current = row.get("–ë–∞–Ω–∫") or "‚Äî"
    # —Å–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±–∞–Ω–∫–æ–≤ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º add
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    banks = sorted(set(ws.col_values(3)[1:]))
    kb = InlineKeyboardMarkup([[InlineKeyboardButton(b, callback_data=f"edit_bank|{b}")] for b in banks])
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´–ë–∞–Ω–∫¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–Ω–∫:",
        reply_markup=kb
    )
    return STATE_OP_EDIT_INPUT

async def ask_edit_operation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """5.2 ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–±–µ–∑ –ü–µ—Ä–µ–≤–æ–¥–∞)."""
    query = update.callback_query; await query.answer()
    logger.debug("ask_edit_operation called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]
    current = row.get("–û–ø–µ—Ä–∞—Ü–∏—è") or "‚Äî"
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="edit_operation|–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"),
        InlineKeyboardButton("–¢—Ä–∞—Ç–∞",      callback_data="edit_operation|–¢—Ä–∞—Ç–∞"),
    ]])
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´–û–ø–µ—Ä–∞—Ü–∏—è¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø:",
        reply_markup=kb
    )
    return STATE_OP_EDIT_INPUT

async def ask_edit_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """5.3 ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""
    query = update.callback_query; await query.answer()
    logger.debug("ask_edit_date called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]
    current = row.get("–î–∞—Ç–∞") or "‚Äî"
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    cal = create_calendar(now.year, now.month)
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´–î–∞—Ç–∞¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
        reply_markup=cal
    )
    return STATE_SELECT_DATE  # –∫–∞–ª–µ–Ω–¥–∞—Ä—å —É –Ω–∞—Å –æ–±—â–∏–π

async def ask_edit_sum(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """5.4 ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π —Å—É–º–º—ã."""
    query = update.callback_query; await query.answer()
    logger.debug("ask_edit_sum called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]
    current = row.get("–°—É–º–º–∞") or "‚Äî"
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´–°—É–º–º–∞¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?\n‚ûñ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
    )
    return STATE_ENTER_AMOUNT

async def ask_edit_classification(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """5.5 ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    query = update.callback_query; await query.answer()
    logger.debug("ask_edit_classification called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]
    current = row.get("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è") or "‚Äî"
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?\nüè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
    )
    return STATE_ENTER_CLASSIFICATION

async def ask_edit_specific(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """5.6 ‚Äî –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏."""
    query = update.callback_query; await query.answer()
    logger.debug("ask_edit_specific called ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    row = context.user_data["editing_op"]["data"]
    current = row.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "‚Äî"
    await query.edit_message_text(
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ ¬´–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞¬ª ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ¬´{current}¬ª?\nüîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
    )
    return STATE_ENTER_SPECIFIC

# 5.1 ‚Äî –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞
async def handle_edit_bank_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    logger.debug("handle_edit_bank_selection ‚Äî data=%s", q.data) #–õ–æ–≥–∏
    # callback_data = "edit_bank|Tinkoff" ‚Äî –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–Ω–∫
    new_bank = q.data.split("|", 1)[1]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    context.user_data["editing_op"]["data"]["–ë–∞–Ω–∫"] = new_bank
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∫–Ω—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    return await handle_op_select(update, context)

# 5.2 ‚Äî –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
async def handle_edit_operation_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    logger.debug("handle_edit_operation_selection ‚Äî data=%s", q.data) #–õ–æ–≥–∏
    new_op = q.data.split("|", 1)[1]
    context.user_data["editing_op"]["data"]["–û–ø–µ—Ä–∞—Ü–∏—è"] = new_op
    return await handle_op_select(update, context)

# 5.3 ‚Äî –≤—ã–±–æ—Ä –¥–∞—Ç—ã (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º calendar –∏–∑ operations)
async def handle_edit_date_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query; await q.answer()
    logger.debug("handle_edit_date_callback ‚Äî data=%s", q.data) #–õ–æ–≥–∏
    # data = "select_date|2025-07-08"
    _, ds = q.data.split("|", 1)
    context.user_data["editing_op"]["data"]["–î–∞—Ç–∞"] = ds
    return await handle_op_select(update, context)

# 5.4 ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã
async def handle_edit_sum_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip().replace(",",".")
    logger.debug("handle_edit_sum_input ‚Äî text=%r", text) #–õ–æ–≥–∏
    try:
        amt = float(text)
    except ValueError:
        return await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    context.user_data["editing_op"]["data"]["–°—É–º–º–∞"] = amt
    return await handle_op_select(update, context)

# 5.5 ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def handle_edit_classification_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    5.5 ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    # 1) –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = update.message.text.strip()
    # 2) –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
    logger.debug("handle_edit_classification_input ‚Äî text=%r", text)
    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["editing_op"]["data"]["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] = text
    # 4) –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –ø–æ–ª–µ–º
    return await handle_op_select(update, context)


# 5.6 ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
async def handle_edit_specific_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    5.6 ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
    """
    # 1) –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç, —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = update.message.text.strip()
    # 2) –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
    logger.debug("handle_edit_specific_input ‚Äî text=%r", text)
    # 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –≤–≤–æ–¥ ‚Üí "-")
    context.user_data["editing_op"]["data"]["–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"] = text or "-"
    # 4) –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –ø–æ–ª–µ–º
    return await handle_op_select(update, context)



# 3.7 ‚Äî –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
async def handle_edit_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    logger.debug("handle_edit_cancel ‚Äî callback_data=%s", query.data) #–õ–æ–≥–∏
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—è—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å / ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å / üóë –£–¥–∞–ª–∏—Ç—å / üîô –ù–∞–∑–∞–¥
    return await handle_op_select(update, context)

# 4.7 ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—É—é
async def handle_edit_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer("–°–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è‚Ä¶", show_alert=False)
    logger.debug("handle_edit_confirm ‚Äî callback_data=%s", q.data)

    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ç–∞–±–ª–∏—Ü—É
    edit = context.user_data["editing_op"]
    row = edit["data"]
    url = context.user_data["sheet_url"]
    ws, _ = open_finance_and_plans(url)

    # 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∫–µ (–ë–∞–Ω–∫, –î–∞—Ç–∞, –°—É–º–º–∞)
    all_vals = ws.get_all_values()
    for i, vals in enumerate(all_vals[1:], start=2):
        if (vals[2], vals[4], vals[5]) == (row["–ë–∞–Ω–∫"], row["–î–∞—Ç–∞"], str(row["–°—É–º–º–∞"])):
            ws.delete_rows(i)
            break

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω–µ—Ü
    new_row = [
        row["–ì–æ–¥"], row["–ú–µ—Å—è—Ü"], row["–ë–∞–Ω–∫"], row["–û–ø–µ—Ä–∞—Ü–∏—è"],
        row["–î–∞—Ç–∞"], row["–°—É–º–º–∞"], row["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"],
        row.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "-"
    ]
    ws.append_row(new_row, value_input_option="USER_ENTERED")

    # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await query.edit_message_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    context.user_data.pop("editing_op", None)

    # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    return await start_men_oper(update, context)

# (–¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å handle_op_edit_* —Ç–æ—á–Ω–æ –ø–æ —Ç–æ–π –∂–µ —Å—Ö–µ–º–µ, —á—Ç–æ –∏ –≤ /add)

def register_men_oper_handlers(app):
    conv = ConversationHandler(
        entry_points=[ CallbackQueryHandler(start_men_oper, pattern=r"^menu:men_oper$") ],
        states={
            STATE_OP_LIST: [
                CallbackQueryHandler(start_men_oper, pattern=r"^menu:men_oper$")
            ],
            STATE_OP_SELECT: [
                CallbackQueryHandler(handle_op_select, pattern=r"^op_select_\d+$"),
                CallbackQueryHandler(exit_to_main_menu, pattern=r"^menu:open$")
            ],
            STATE_OP_CONFIRM: [
                CallbackQueryHandler(handle_op_delete,  pattern=r"^op_delete$"),
                CallbackQueryHandler(handle_op_edit_choice, pattern=r"^op_edit$"),
                CallbackQueryHandler(handle_op_back,     pattern=r"^op_back$")
            ],
            STATE_OP_EDIT_CHOICE: [
                # 1) –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è:
                CallbackQueryHandler(ask_edit_bank,           pattern=r"^edit_bank$"),
                CallbackQueryHandler(ask_edit_operation,      pattern=r"^edit_operation$"),
                CallbackQueryHandler(ask_edit_date,           pattern=r"^edit_date$"),
                CallbackQueryHandler(ask_edit_sum,            pattern=r"^edit_sum$"),
                CallbackQueryHandler(ask_edit_classification, pattern=r"^edit_classification$"),
                CallbackQueryHandler(ask_edit_specific,       pattern=r"^edit_specific$"),
                # 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:
                CallbackQueryHandler(handle_edit_bank_selection,      pattern=r"^edit_bank\|"),
                CallbackQueryHandler(handle_edit_operation_selection, pattern=r"^edit_operation\|"),
                CallbackQueryHandler(handle_edit_date_callback,       pattern=r"^select_date\|"),
                MessageHandler(filters.TEXT & ~filters.COMMAND,       handle_edit_sum_input),
                MessageHandler(filters.TEXT & ~filters.COMMAND,       handle_edit_classification_input),
                MessageHandler(filters.TEXT & ~filters.COMMAND,       handle_edit_specific_input),
                # 3) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                CallbackQueryHandler(handle_edit_confirm,              pattern=r"^edit_confirm$"),
                # 4) –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                CallbackQueryHandler(handle_edit_cancel,               pattern=r"^edit_cancel$")

            ],
            # —ç—Ç–æ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–∞–º–∏ ask_* –∏–∑ handlers/operations –∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å STATE_OP_EDIT_INPUT
            STATE_OP_EDIT_INPUT: [
                # —Å—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               # –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                               handle_edit_input)
            ],
        },
        fallbacks=[ CallbackQueryHandler(exit_to_main_menu, pattern=r"^menu:open$") ],
        allow_reentry=True
    )
    app.add_handler(conv)
