# handlers/men_oper.py

from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    CallbackQueryHandler, ConversationHandler,
    ContextTypes, MessageHandler, filters
)
from services.sheets_service import open_finance_and_plans
from utils.constants import (
    STATE_OP_MENU,
    STATE_OP_LIST, STATE_OP_SELECT,
    STATE_OP_CONFIRM, STATE_OP_EDIT_CHOICE,
    STATE_OP_EDIT_INPUT
)

# ‚Äî —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ ¬´–Ø ‚Üí –ê¬ª
SORT_REQUEST = {
    "requests":[{ "sortRange": {
        "range": {
            "sheetId":           None,  # –∑–∞–ø–æ–ª–Ω–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            "startRowIndex":     1,
            "startColumnIndex":  0,
            "endColumnIndex":    8,
        },
        "sortSpecs":[{ "dimensionIndex":4, "sortOrder":"DESCENDING" }]
    }}]
}

# ‚Äî —Ç–æ—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ ¬´–§–∏–Ω–∞–Ω—Å—ã¬ª
EXPECTED_HEADERS = ["–ì–æ–¥","–ú–µ—Å—è—Ü","–ë–∞–Ω–∫","–û–ø–µ—Ä–∞—Ü–∏—è","–î–∞—Ç–∞","–°—É–º–º–∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è","–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"]

import logging
logger = logging.getLogger(__name__)


# –ü—Ä–∞–≤–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –º–µ–Ω—é
async def exit_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –í—ã—Ö–æ–¥ –∏–∑ –≤–µ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    if update.callback_query:
        await update.callback_query.answer()

    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è
    from handlers.menu import show_main_menu

    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    return await show_main_menu(update, context)

# –í–µ—Ç–∫–∞ –û–ø–µ—Ä–∞—Ü–∏–∏
async def start_men_oper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—É—Å–∫ –≤–µ—Ç–∫–∏ ¬´–û–ø–µ—Ä–∞—Ü–∏–∏¬ª."""
    query = update.callback_query
    await query.answer()
    url = context.user_data.get("sheet_url")
    if not url:
        return await query.edit_message_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É: /setup")
    
    ws, _ = open_finance_and_plans(url)
    # 1) –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç
    sheet_id = ws._properties["sheetId"]
    SORT_REQUEST["requests"][0]["sortRange"]["range"]["sheetId"] = sheet_id
    ws.spreadsheet.batch_update(SORT_REQUEST)
    
    # 2) –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    all_values = ws.get_all_values()   # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç header + —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_rows = all_values[1:1+10]     # –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
    last_ops = []
    for row_values in data_rows:
        last_ops.append({
            "–ì–æ–¥":             row_values[0],
            "–ú–µ—Å—è—Ü":           row_values[1],
            "–ë–∞–Ω–∫":            row_values[2],
            "–û–ø–µ—Ä–∞—Ü–∏—è":        row_values[3],
            "–î–∞—Ç–∞":            row_values[4],
            "–°—É–º–º–∞":           row_values[5],
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è":   row_values[6],
            "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞":      row_values[7] or "",
        })
    context.user_data["last_ops"] = last_ops

    # 3) –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    lines = []
    for i, row in enumerate(last_ops):
        lines.append(
            f"{i}. {row['–ë–∞–Ω–∫']}  {row['–°—É–º–º–∞']}  {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}, {row['–î–∞—Ç–∞']}"
        )
    text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:*\n" + "\n".join(lines)

    # 4) –ö–Ω–æ–ø–∫–∏: –ø–æ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –µ—ë –Ω–æ–º–µ—Ä, –∏ ¬´–ù–∞–∑–∞–¥¬ª –≤ –º–µ–Ω—é
    kb = [
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [1, 2, 3] if i < len(last_ops)],
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [4, 5, 6] if i < len(last_ops)],
        [InlineKeyboardButton(str(i), callback_data=f"op_select_{i}") for i in [7, 8, 9] if i < len(last_ops)],
    ]
    # ¬´0¬ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∏–Ω–¥–µ–∫—Å–æ–º 0
    if len(last_ops) > 0:
        kb.append([InlineKeyboardButton("0", callback_data="op_select_0")])
    # –≤ —Å–∞–º–æ–º –Ω–∏–∑—É –±–æ–ª—å—à–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    kb.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu:open")])

    await query.edit_message_text(
        text, parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return STATE_OP_SELECT


async def handle_op_select(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –Ω–æ–º–µ—Ä 0‚Äì9 ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ + –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    query = update.callback_query
    await query.answer()
    idx = int(query.data.split("_")[-1])
    row = context.user_data["last_ops"][idx]
        # row ‚Äî —ç—Ç–æ dict —Å –ø–æ–ª—è–º–∏ –∏–∑ –ª–∏—Å—Ç–∞
    context.user_data["editing_op"] = {
        "index":    idx,
        "original": row.copy(),   # —Å–∫–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ
        "data":     row           # —Å—é–¥–∞ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }


    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç
    detail = (
        f"*–û–ø–µ—Ä–∞—Ü–∏—è #{idx}:*\n"
        f"–ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
        f"–î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
        f"–°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
        f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
        f"–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}"
    )

    # –ö–Ω–æ–ø–∫–∏
    buttons = []
    # ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç ¬´–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏¬ª
    required = ["–ë–∞–Ω–∫","–û–ø–µ—Ä–∞—Ü–∏—è","–î–∞—Ç–∞","–°—É–º–º–∞","–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"]
    if all(row.get(f) for f in required):
        buttons.append(InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="op_confirm"))
    buttons += [
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="op_edit"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="op_delete"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",   callback_data="op_back"),
    ]

    await query.edit_message_text(
        detail, parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([buttons])
    )
    return STATE_OP_CONFIRM


async def handle_op_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)."""
    query = update.callback_query
    await query.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é‚Ä¶", show_alert=False)

    url = context.user_data["sheet_url"]
    ws, _ = open_finance_and_plans(url)
    edit = context.user_data["editing_op"]
    row = edit["data"]

    # 1) –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ (–ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É —Å–æ—á–µ—Ç–∞–Ω–∏—é)
    all_values = ws.get_all_values()
    # –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π ‚Äî —à–∞–ø–∫–∞, –ø–æ—Ç–æ–º data:
    row_number = None
    for i, values in enumerate(all_values[1:], start=2):
        if (values[2], values[4], values[5]) == (row["–ë–∞–Ω–∫"], row["–î–∞—Ç–∞"], str(row["–°—É–º–º–∞"])):
            row_number = i
            break
    if row_number:
        ws.delete_rows(row_number)
    # 2) –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –∂–µ
    new_row = [
        row["–ì–æ–¥"], row["–ú–µ—Å—è—Ü"], row["–ë–∞–Ω–∫"], row["–û–ø–µ—Ä–∞—Ü–∏—è"],
        row["–î–∞—Ç–∞"], row["–°—É–º–º–∞"], row["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"], row.get("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞") or "-"
    ]
    ws.append_row(new_row, value_input_option="USER_ENTERED")

    await query.edit_message_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await start_men_oper(update, context)


async def handle_op_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query

    await query.answer()
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é pop-up –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    await query.edit_message_text("üóë –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")

    # —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
    ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
    row = context.user_data["editing_op"]["data"]

    # –ø–∞—Ä—Å–∏–º —Å—É–º–º—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    try:
        target_sum = float(
            str(row["–°—É–º–º–∞"])
            .replace("\xa0","")
            .replace(" ","")
            .replace(",",".")
        )
    except (KeyError, ValueError):
        target_sum = None  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    all_vals = ws.get_all_values()
    for idx, values in enumerate(all_vals[1:], start=2):
        bank_cell = values[2]
        date_cell = values[4]
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—É–º–º—É –∏–∑ –ª–∏—Å—Ç–∞
        try:
            sum_cell = float(
                str(values[5])
                .replace("\xa0","")
                .replace(" ","")
                .replace(",",".")
            )
        except ValueError:
            continue

        if (
            bank_cell == row["–ë–∞–Ω–∫"] and
            date_cell == row["–î–∞—Ç–∞"] and
            (target_sum is None or sum_cell == target_sum)
        ):
            ws.delete_rows(idx)
            break

    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –æ–ø–µ—Ä–∞—Ü–∏–π
    return await start_men_oper(update, context)

async def handle_op_edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()

    edit = context.user_data["editing_op"]
    idx = edit["index"]
    row = edit["data"]

    # –°–æ–±–∏—Ä–∞–µ–º detail-card —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ handle_op_select
    detail = (
        f"*–û–ø–µ—Ä–∞—Ü–∏—è #{idx}:*\n"
        f"–ë–∞–Ω–∫: {row['–ë–∞–Ω–∫']}\n"
        f"–û–ø–µ—Ä–∞—Ü–∏—è: {row['–û–ø–µ—Ä–∞—Ü–∏—è']}\n"
        f"–î–∞—Ç–∞: {row['–î–∞—Ç–∞']}\n"
        f"–°—É–º–º–∞: {row['–°—É–º–º–∞']}\n"
        f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {row['–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è']}\n"
        f"–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞: {row['–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞'] or '‚Äî'}\n\n"
    )

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    kb = [
        [InlineKeyboardButton("–ë–∞–Ω–∫",           callback_data="edit_bank"),
         InlineKeyboardButton("–û–ø–µ—Ä–∞—Ü–∏—è",       callback_data="edit_operation")],
        [InlineKeyboardButton("–î–∞—Ç–∞",           callback_data="edit_date"),
         InlineKeyboardButton("–°—É–º–º–∞",          callback_data="edit_sum")],
        [InlineKeyboardButton("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  callback_data="edit_classification"),
         InlineKeyboardButton("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",     callback_data="edit_specific")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",  callback_data="op_save"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥",        callback_data="op_back")],
    ]

    await update.callback_query.edit_message_text(
        detail + "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return STATE_OP_EDIT_CHOICE

async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ ask_*."""
    logger.debug("üîß handle_edit_field called (data=%s)", update.callback_query.data)
    query = update.callback_query
    await query.answer()

    # 1) –î–æ—Å—Ç–∞—ë–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –ø—Ä–∞–≤–∏–º:
    field = query.data.split("_", 1)[1]  # –Ω–∞–ø—Ä–∏–º–µ—Ä "bank", "operation" –∏ —Ç.–ø.
    context.user_data["edit_field"] = field

    # 2) –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    row = context.user_data["editing_op"]["data"]

    # 3) –õ–æ–∫–∞–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ ask_* —á—Ç–æ–±—ã —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    from handlers.operations import (
        ask_operation,
        ask_amount as ask_sum,
        input_classification as ask_classification,
        input_specific as ask_specific,
        ask_date,
    )

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ ¬´–∫–ª—é—á ‚Üí (–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ–ò–º—è, –§—É–Ω–∫—Ü–∏—è-–æ–ø—Ä–æ—Å–Ω–∏–∫)¬ª
    mapping = {
        "bank":           ("–ë–∞–Ω–∫",           ask_bank),
        "operation":      ("–û–ø–µ—Ä–∞—Ü–∏—è",       ask_operation),
        "date":           ("–î–∞—Ç–∞",            ask_date),
        "sum":            ("–°—É–º–º–∞",           ask_sum),
        "classification": ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",  ask_classification),
        "specific":       ("–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞",      ask_specific),
    }
    display_name, handler = mapping[field]

    # 5) –í—ã–∑—ã–≤–∞–µ–º –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    current = row.get(display_name) or ""
    return await handler(update, context, current)


# ‚Äî‚Äî‚Äî –®–∞–≥ 1: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ë–∞–Ω–∫ ‚Äî‚Äî‚Äî
async def ask_bank(update: Update, context: ContextTypes.DEFAULT_TYPE, current_value: str) -> int:
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤—ã–π –ë–∞–Ω–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–∑ –µ–≥–æ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤.
    """
    # –°–Ω–∏–º–∞–µ–º ¬´—á–∞—Å–∏–∫–∏¬ª
    if update.callback_query:
        await update.callback_query.answer()
        query = update.callback_query
    else:
        query = update.message

    logger.debug("üîß ask_bank called, current_value=%s", current_value) #–õ–æ–≥–∏

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—ç—à–∏—Ä—É–µ–º)
    banks = context.user_data.get("user_banks")
    if banks is None:
        ws, _ = open_finance_and_plans(context.user_data["sheet_url"])
        rows = ws.get_all_values()[1:]
        banks = sorted({ row[2] for row in rows if row[2] })
        context.user_data["user_banks"] = banks
        
    logger.debug("üîß available banks for user: %s", banks) #–õ–æ–≥–∏

    # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = [[InlineKeyboardButton(b, callback_data=f"edit_bank_choice_{b}")] for b in banks]
    kb.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="op_back")])

    text = (
        f"–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª–µ *–ë–∞–Ω–∫* ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: "
        f"`{current_value or '‚Äî'}`?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )
    await query.edit_message_text(text, parse_mode="Markdown",
                                  reply_markup=InlineKeyboardMarkup(kb))
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—ã–±–æ—Ä –∫–Ω–æ–ø–∫–æ–π)
    return STATE_OP_EDIT_INPUT


async def handle_bank_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –±–∞–Ω–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. 
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
    """
    await update.callback_query.answer()
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±–∞–Ω–∫ –∏–∑ callback_data
    _, _, _, selected = update.callback_query.data.split("_", 3)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä –¥–æ–ø—É—Å—Ç–∏–º
    banks = context.user_data.get("user_banks", [])
    if selected not in banks:
        await update.callback_query.edit_message_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ *—Ç–æ–ª—å–∫–æ* –∏–∑ —Å–ø–∏—Å–∫–∞!", parse_mode="Markdown")
        return STATE_OP_EDIT_INPUT

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –±–∞–Ω–∫ –≤ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    context.user_data["editing_op"]["data"]["–ë–∞–Ω–∫"] = selected

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å —É–∂–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –±–∞–Ω–∫–æ–º)
    return await handle_op_edit_choice(update, context)

async def handle_edit_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    text = update.message.text
    field = context.user_data["edit_field"]
    # –û–±—Ä–∞—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á ‚Üí –≤–∞—à–µ –ø–æ–ª–µ –≤ row
    rev_map = {
        "bank": "–ë–∞–Ω–∫", "operation": "–û–ø–µ—Ä–∞—Ü–∏—è",
        "date": "–î–∞—Ç–∞", "sum": "–°—É–º–º–∞",
        "classification": "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", "specific": "–ö–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞"
    }
    row = context.user_data["editing_op"]["data"]
    row[rev_map[field]] = text

    # –ü–µ—Ä–µ—Ä–∏—Å—É–µ–º –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π —ç—Ç–æ–π –∂–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ handle_op_select, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    return await handle_op_edit_choice(update, context)

async def handle_op_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """¬´–ù–∞–∑–∞–¥¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    return await start_men_oper(update, context)

async def handle_save_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –ë–∞–Ω–∫ –≤ Google-Sheets –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É."""
    q = update.callback_query
    await q.answer()

    edit = context.user_data["editing_op"]
    orig = edit["original"]    # –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    new  = edit["data"]        # —Å–ª–æ–≤–∞—Ä—å —Å (–ø–æ–∫–∞ —á—Ç–æ) –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º –ø–æ–ª–µ–º '–ë–∞–Ω–∫'
    url  = context.user_data["sheet_url"]

    # 1) –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—Å—Ç
    ws, _ = open_finance_and_plans(url)

    # 2) –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ –ø–æ original
    all_vals = ws.get_all_values()
    row_number = None
    for i, values in enumerate(all_vals[1:], start=2):
        # —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–Ω–∫, –¥–∞—Ç—É –∏ —Å—É–º–º—É –∏–∑ original
        if (values[2], values[4], values[5]) == (
            orig["–ë–∞–Ω–∫"], orig["–î–∞—Ç–∞"], str(orig["–°—É–º–º–∞"])
        ):
            row_number = i
            break

    if not row_number:
        await q.edit_message_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return await start_men_oper(update, context)

    # 3) –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫—É ¬´–ë–∞–Ω–∫¬ª (—Ç—Ä–µ—Ç—å—è –≤ —Ç–∞–±–ª–∏—Ü–µ, –∏–Ω–¥–µ–∫—Å 3)
    ws.update_cell(row_number, 3, new["–ë–∞–Ω–∫"])

    # 4) —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    await q.edit_message_text("‚úÖ –ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    # —á–∏—Å—Ç–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop("editing_op", None)
    return await start_men_oper(update, context)


# (–¥–∞–ª–µ–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å handle_op_edit_* —Ç–æ—á–Ω–æ –ø–æ —Ç–æ–π –∂–µ —Å—Ö–µ–º–µ, —á—Ç–æ –∏ –≤ /add)

def register_men_oper_handlers(app):
    conv = ConversationHandler(
        entry_points=[ CallbackQueryHandler(start_men_oper, pattern=r"^menu:men_oper$") ],
        states={
            STATE_OP_LIST: [
                CallbackQueryHandler(start_men_oper, pattern=r"^menu:men_oper$")
            ],
            STATE_OP_SELECT: [
                CallbackQueryHandler(handle_op_select, pattern=r"^op_select_\d+$"),
                CallbackQueryHandler(exit_to_main_menu, pattern=r"^menu:open$")
            ],
            STATE_OP_CONFIRM: [
                CallbackQueryHandler(handle_op_confirm, pattern=r"^op_confirm$"),
                CallbackQueryHandler(handle_op_delete,  pattern=r"^op_delete$"),
                CallbackQueryHandler(handle_op_edit_choice, pattern=r"^op_edit$"),
                CallbackQueryHandler(handle_op_back,     pattern=r"^op_back$")
            ],
            STATE_OP_EDIT_CHOICE: [
                CallbackQueryHandler(handle_edit_field,
                                     pattern=r"^edit_(bank|operation|date|sum|classification|specific)$"),
                CallbackQueryHandler(handle_save_edit, pattern=r"^op_save$"),                     
                CallbackQueryHandler(handle_op_back, pattern=r"^op_back$")
            ],
            # —ç—Ç–æ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–∞–º–∏ ask_* –∏–∑ handlers/operations –∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å STATE_OP_EDIT_INPUT
            STATE_OP_EDIT_INPUT: [
                # —Å—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                CallbackQueryHandler(handle_bank_choice, pattern=r"^edit_bank_choice_.+$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_input)
            ],
        },
        fallbacks=[ CallbackQueryHandler(exit_to_main_menu, pattern=r"^menu:open$") ],
        allow_reentry=True, per_message=True,
    )
    app.add_handler(conv)