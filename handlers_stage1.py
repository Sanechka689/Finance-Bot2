# handlers_stage1.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# ==============================
# –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
# ==============================

# 1.1 –ö–æ–º–∞–Ω–¥–∞ /start
# üëâ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª –∏ ¬´–ì—Ä—É–ø–ø–∞ –≤ Telegram¬ª
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Stage 1.1.1: –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [
            InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", callback_data="tariff_free_info"),
            InlineKeyboardButton("–¢–∞—Ä–∏—Ñ 1",    callback_data="tariff_1_info"),
            InlineKeyboardButton("–¢–∞—Ä–∏—Ñ 2",    callback_data="tariff_2_info"),
        ],
        [
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞",  callback_data="support_info"),
            InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ –≤ Telegram", url="https://t.me/your_group_link"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # Stage 1.1.2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–æ–ª–±—ç–∫–∞
    context.bot_data['stage1_keyboard'] = reply_markup
    # Stage 1.1.3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª:",
        reply_markup=reply_markup
    )

# 1.2 –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–µ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
async def tariff_info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Stage 1.2.1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫
    query = update.callback_query
    await query.answer()
    code = query.data
    # Stage 1.2.2: –û–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    descriptions = {
        "tariff_free_info": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:\n- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 0 ‚ÇΩ",
        "tariff_1_info":    "–¢–∞—Ä–∏—Ñ 1:\n- –¢–µ–∫—Å—Ç/–≥–æ–ª–æ—Å ‚Üí AI ‚Üí JSON\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 300 ‚ÇΩ/–º–µ—Å",
        "tariff_2_info":    "–¢–∞—Ä–∏—Ñ 2:\n- –¢–µ–∫—Å—Ç/–≥–æ–ª–æ—Å/—Ñ–æ—Ç–æ/QR ‚Üí AI ‚Üí JSON\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 500 ‚ÇΩ/–º–µ—Å",
        "support_info":     "‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n- @your_support_bot\n- support@example.com"
    }
    text = descriptions.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")
    # Stage 1.2.3: –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ¬ª (–¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤)
    buttons = [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    if code.startswith("tariff_"):
        tariff = code.replace("_info", "")
        buttons.append(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data=f"confirm_{tariff}"))
    reply_markup = InlineKeyboardMarkup([buttons])
    await query.edit_message_text(text, reply_markup=reply_markup)

# 1.3 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
async def confirm_tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Stage 1.3.1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫
    query = update.callback_query
    await query.answer()
    tariff = query.data.replace("confirm_", "")
    user_id = update.effective_user.id
    # Stage 1.3.2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
    context.bot_data['user_repo'].save_tariff(user_id, tariff, paid=(tariff == "tariff_free"))
    # Stage 1.3.3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if tariff == "tariff_free":
        await query.edit_message_text(
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É Google-—Ç–∞–±–ª–∏—Ü—É."
        )
    else:
        checkout_url = context.bot_data['payment_client'].create_checkout_session(user_id=user_id, tariff=tariff)
        await query.edit_message_text(
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{checkout_url}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø."
        )

# 1.4 –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Stage 1.4.1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫
    query = update.callback_query
    await query.answer()
    # Stage 1.4.2: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text(
        "üëã –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª:",
        reply_markup=context.bot_data['stage1_keyboard']
    )

# 1.5 –§–æ–ª–±—ç–∫ –¥–ª—è –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
async def stage1_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Stage 1.5.1: –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
    await update.message.reply_text(
        "‚ö†Ô∏è –í—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=context.bot_data['stage1_keyboard']
    )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ —ç—Ç–∞–ø–∞ 1
def register_stage1_handlers(app):
    """
    Stage 1: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —Ñ–æ–ª–±—ç–∫–∞
    """
    # Stage 1.1: –ö–æ–º–∞–Ω–¥–∞ /start
    app.add_handler(CommandHandler("start", start_handler))
    # Stage 1.2: –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    app.add_handler(CallbackQueryHandler(tariff_info_callback, pattern=r"^(tariff_(free|1|2)_info|support_info)$"))
    # Stage 1.3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    app.add_handler(CallbackQueryHandler(confirm_tariff_callback, pattern=r"^confirm_(tariff_free|tariff_1|tariff_2)$"))
    # Stage 1.4: –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    app.add_handler(CallbackQueryHandler(back_to_start_callback, pattern=r"^back_to_start$"))
    # Stage 1.5: –§–æ–ª–±—ç–∫ –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.ALL, stage1_fallback), group=1)
