# handlers_stage1.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# ==============================
# –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
# ==============================

# 1.1: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤
async def start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", callback_data="tariff_free_info"),
            InlineKeyboardButton("–¢–∞—Ä–∏—Ñ 1",    callback_data="tariff_1_info"),
            InlineKeyboardButton("–¢–∞—Ä–∏—Ñ 2",    callback_data="tariff_2_info"),
        ],
        [
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_info"),
            InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ –≤ Telegram", url="https://t.me/your_group_link"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–º–æ—â—å:\n\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π\n"
        "‚Ä¢ –¢–∞—Ä–∏—Ñ 1 (—Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å ‚Üí AI ‚Üí JSON)\n"
        "‚Ä¢ –¢–∞—Ä–∏—Ñ 2 (+ —Ñ–æ—Ç–æ/QR)\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.",
        reply_markup=reply_markup
    )

# 1.2: –ü–æ–∫–∞–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
async def tariff_info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    code = query.data  # tariff_free_info / tariff_1_info / tariff_2_info

    # –û–ø–∏—Å–∞–Ω–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    descriptions = {
        "tariff_free_info": ("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:\n"
                             "- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
                             "- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è\n"
                             "–°—Ç–æ–∏–º–æ—Å—Ç—å: 0 ‚ÇΩ"),
        "tariff_1_info":    ("–¢–∞—Ä–∏—Ñ 1:\n"
                             "- –¢–µ–∫—Å—Ç/–≥–æ–ª–æ—Å ‚Üí AI ‚Üí JSON\n"
                             "–°—Ç–æ–∏–º–æ—Å—Ç—å: 300 ‚ÇΩ/–º–µ—Å"),
        "tariff_2_info":    ("–¢–∞—Ä–∏—Ñ 2:\n"
                             "- –¢–µ–∫—Å—Ç/–≥–æ–ª–æ—Å/—Ñ–æ—Ç–æ/QR ‚Üí AI ‚Üí JSON\n"
                             "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500 ‚ÇΩ/–º–µ—Å"),
        "support_info":     ("‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n"
                             "- @your_support_bot\n"
                             "- support@example.com")
    }
    text = descriptions.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä")

    # –ö–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª –∏ ¬´–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ¬ª
    keyboard = []
    if code.startswith("tariff_"):
        # –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ¬´–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ¬ª
        tariff = code.replace("_info", "")
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start"),
            InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ", callback_data=f"confirm_{tariff}")
        ])
    else:
        # –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ ¬´–ù–∞–∑–∞–¥¬ª
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup)

# 1.3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
async def confirm_tariff_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # confirm_tariff_free / confirm_tariff_1 / confirm_tariff_2
    tariff = data.replace("confirm_", "")
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
    context.bot_data['user_repo'].save_tariff(
        user_id, tariff, paid=(tariff == "tariff_free")
    )

    if tariff == "tariff_free":
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ‚Äî —Å—Ä–∞–∑—É —ç—Ç–∞–ø 2
        await query.edit_message_text(
            "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Google-—Ç–∞–±–ª–∏—Ü—É."
        )
    else:
        # –ü–ª–∞—Ç–Ω—ã–µ ‚Äî –¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        checkout_url = context.bot_data['payment_client'].create_checkout_session(
            user_id=user_id, tariff=tariff
        )
        await query.edit_message_text(
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{checkout_url}\n\n"
            "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–æ—Ç –æ—Ç–∫—Ä–æ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø."
        )

# 1.4: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_start_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º start_handler, –Ω–æ —á–µ—Ä–µ–∑ edit_message_text
    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ:
    keyboard = [
        [
            InlineKeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", callback_data="tariff_free_info"),
            InlineKeyboardButton("–¢–∞—Ä–∏—Ñ 1",    callback_data="tariff_1_info"),
            InlineKeyboardButton("–¢–∞—Ä–∏—Ñ 2",    callback_data="tariff_2_info"),
        ],
        [
            InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_info"),
            InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ –≤ Telegram", url="https://t.me/your_group_link"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üëã –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª:",
        reply_markup=reply_markup
    )

# –í register_stage1_handlers:
app.add_handler(MessageHandler(filters.TEXT | filters.COMMAND | filters.ALL, stage1_fallback), group=1)


def register_stage1_handlers(app):
    # Stage 1.1: /start
    app.add_handler(CommandHandler("start", start_handler))

    # Stage 1.2: –ø–æ–∫–∞–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    app.add_handler(CallbackQueryHandler(tariff_info_callback,
                                         pattern=r"^(tariff_(free|1|2)_info|support_info)$"))

    # Stage 1.3: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
    app.add_handler(CallbackQueryHandler(confirm_tariff_callback,
                                         pattern=r"^confirm_tariff_(free|1|2)$"))

    # Stage 1.4: –∫–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª
    app.add_handler(CallbackQueryHandler(back_to_start_callback,
                                         pattern=r"^back_to_start$"))

# Stage 1.5: –§–æ–ª–±—ç–∫ ‚Äî –≤—Å—ë, —á—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∏
async def stage1_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ö†Ô∏è –°–µ–π—á–∞—Å –≤—ã –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=context.bot_data['stage1_keyboard']
    )

